/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package it.servizidigitali.profiloutente.model.impl;

import com.liferay.exportimport.kernel.lar.StagedModelType;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.User;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.UserLocalServiceUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.PortalUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringUtil;

import it.servizidigitali.profiloutente.model.UtenteOrganizzazioneCanaleComunicazione;
import it.servizidigitali.profiloutente.model.UtenteOrganizzazioneCanaleComunicazioneModel;
import it.servizidigitali.profiloutente.service.persistence.UtenteOrganizzazioneCanaleComunicazionePK;

import java.io.Serializable;

import java.lang.reflect.Constructor;
import java.lang.reflect.InvocationHandler;

import java.sql.Blob;
import java.sql.Types;

import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.Objects;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the UtenteOrganizzazioneCanaleComunicazione service. Represents a row in the &quot;utente_organizzazione_canalecomunicazione&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>UtenteOrganizzazioneCanaleComunicazioneModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link UtenteOrganizzazioneCanaleComunicazioneImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see UtenteOrganizzazioneCanaleComunicazioneImpl
 * @generated
 */
public class UtenteOrganizzazioneCanaleComunicazioneModelImpl
	extends BaseModelImpl<UtenteOrganizzazioneCanaleComunicazione>
	implements UtenteOrganizzazioneCanaleComunicazioneModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a utente organizzazione canale comunicazione model instance should use the <code>UtenteOrganizzazioneCanaleComunicazione</code> interface instead.
	 */
	public static final String TABLE_NAME =
		"utente_organizzazione_canalecomunicazione";

	public static final Object[][] TABLE_COLUMNS = {
		{"uuid_", Types.VARCHAR}, {"utenteId", Types.BIGINT},
		{"organizationId", Types.BIGINT},
		{"canaleComunicazioneId", Types.BIGINT}, {"groupId", Types.BIGINT},
		{"companyId", Types.BIGINT}, {"userId", Types.BIGINT},
		{"userName", Types.VARCHAR}, {"createDate", Types.TIMESTAMP},
		{"modifiedDate", Types.TIMESTAMP}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("uuid_", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("utenteId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("organizationId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("canaleComunicazioneId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("groupId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("companyId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("createDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("modifiedDate", Types.TIMESTAMP);
	}

	public static final String TABLE_SQL_CREATE =
		"create table utente_organizzazione_canalecomunicazione (uuid_ VARCHAR(75) null,utenteId LONG not null,organizationId LONG not null,canaleComunicazioneId LONG not null,groupId LONG,companyId LONG,userId LONG,userName VARCHAR(75) null,createDate DATE null,modifiedDate DATE null,primary key (utenteId, organizationId, canaleComunicazioneId))";

	public static final String TABLE_SQL_DROP =
		"drop table utente_organizzazione_canalecomunicazione";

	public static final String ORDER_BY_JPQL =
		" ORDER BY utenteOrganizzazioneCanaleComunicazione.id.utenteId ASC, utenteOrganizzazioneCanaleComunicazione.id.organizationId ASC, utenteOrganizzazioneCanaleComunicazione.id.canaleComunicazioneId ASC";

	public static final String ORDER_BY_SQL =
		" ORDER BY utente_organizzazione_canalecomunicazione.utenteId ASC, utente_organizzazione_canalecomunicazione.organizationId ASC, utente_organizzazione_canalecomunicazione.canaleComunicazioneId ASC";

	public static final String DATA_SOURCE = "servizidigitaliDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long COMPANYID_COLUMN_BITMASK = 1L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long GROUPID_COLUMN_BITMASK = 2L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long ORGANIZATIONID_COLUMN_BITMASK = 4L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long UTENTEID_COLUMN_BITMASK = 8L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long UUID_COLUMN_BITMASK = 16L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *		#getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long CANALECOMUNICAZIONEID_COLUMN_BITMASK = 32L;

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
	}

	public UtenteOrganizzazioneCanaleComunicazioneModelImpl() {
	}

	@Override
	public UtenteOrganizzazioneCanaleComunicazionePK getPrimaryKey() {
		return new UtenteOrganizzazioneCanaleComunicazionePK(
			_utenteId, _organizationId, _canaleComunicazioneId);
	}

	@Override
	public void setPrimaryKey(
		UtenteOrganizzazioneCanaleComunicazionePK primaryKey) {

		setUtenteId(primaryKey.utenteId);
		setOrganizationId(primaryKey.organizationId);
		setCanaleComunicazioneId(primaryKey.canaleComunicazioneId);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return new UtenteOrganizzazioneCanaleComunicazionePK(
			_utenteId, _organizationId, _canaleComunicazioneId);
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey((UtenteOrganizzazioneCanaleComunicazionePK)primaryKeyObj);
	}

	@Override
	public Class<?> getModelClass() {
		return UtenteOrganizzazioneCanaleComunicazione.class;
	}

	@Override
	public String getModelClassName() {
		return UtenteOrganizzazioneCanaleComunicazione.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<UtenteOrganizzazioneCanaleComunicazione, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		for (Map.Entry
				<String,
				 Function<UtenteOrganizzazioneCanaleComunicazione, Object>>
					entry : attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<UtenteOrganizzazioneCanaleComunicazione, Object>
				attributeGetterFunction = entry.getValue();

			attributes.put(
				attributeName,
				attributeGetterFunction.apply(
					(UtenteOrganizzazioneCanaleComunicazione)this));
		}

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<UtenteOrganizzazioneCanaleComunicazione, Object>>
			attributeSetterBiConsumers = getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<UtenteOrganizzazioneCanaleComunicazione, Object>
				attributeSetterBiConsumer = attributeSetterBiConsumers.get(
					attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(UtenteOrganizzazioneCanaleComunicazione)this,
					entry.getValue());
			}
		}
	}

	public Map
		<String, Function<UtenteOrganizzazioneCanaleComunicazione, Object>>
			getAttributeGetterFunctions() {

		return _attributeGetterFunctions;
	}

	public Map
		<String, BiConsumer<UtenteOrganizzazioneCanaleComunicazione, Object>>
			getAttributeSetterBiConsumers() {

		return _attributeSetterBiConsumers;
	}

	private static Function
		<InvocationHandler, UtenteOrganizzazioneCanaleComunicazione>
			_getProxyProviderFunction() {

		Class<?> proxyClass = ProxyUtil.getProxyClass(
			UtenteOrganizzazioneCanaleComunicazione.class.getClassLoader(),
			UtenteOrganizzazioneCanaleComunicazione.class, ModelWrapper.class);

		try {
			Constructor<UtenteOrganizzazioneCanaleComunicazione> constructor =
				(Constructor<UtenteOrganizzazioneCanaleComunicazione>)
					proxyClass.getConstructor(InvocationHandler.class);

			return invocationHandler -> {
				try {
					return constructor.newInstance(invocationHandler);
				}
				catch (ReflectiveOperationException
							reflectiveOperationException) {

					throw new InternalError(reflectiveOperationException);
				}
			};
		}
		catch (NoSuchMethodException noSuchMethodException) {
			throw new InternalError(noSuchMethodException);
		}
	}

	private static final Map
		<String, Function<UtenteOrganizzazioneCanaleComunicazione, Object>>
			_attributeGetterFunctions;
	private static final Map
		<String, BiConsumer<UtenteOrganizzazioneCanaleComunicazione, Object>>
			_attributeSetterBiConsumers;

	static {
		Map<String, Function<UtenteOrganizzazioneCanaleComunicazione, Object>>
			attributeGetterFunctions =
				new LinkedHashMap
					<String,
					 Function
						 <UtenteOrganizzazioneCanaleComunicazione, Object>>();
		Map<String, BiConsumer<UtenteOrganizzazioneCanaleComunicazione, ?>>
			attributeSetterBiConsumers =
				new LinkedHashMap
					<String,
					 BiConsumer<UtenteOrganizzazioneCanaleComunicazione, ?>>();

		attributeGetterFunctions.put(
			"uuid", UtenteOrganizzazioneCanaleComunicazione::getUuid);
		attributeSetterBiConsumers.put(
			"uuid",
			(BiConsumer<UtenteOrganizzazioneCanaleComunicazione, String>)
				UtenteOrganizzazioneCanaleComunicazione::setUuid);
		attributeGetterFunctions.put(
			"utenteId", UtenteOrganizzazioneCanaleComunicazione::getUtenteId);
		attributeSetterBiConsumers.put(
			"utenteId",
			(BiConsumer<UtenteOrganizzazioneCanaleComunicazione, Long>)
				UtenteOrganizzazioneCanaleComunicazione::setUtenteId);
		attributeGetterFunctions.put(
			"organizationId",
			UtenteOrganizzazioneCanaleComunicazione::getOrganizationId);
		attributeSetterBiConsumers.put(
			"organizationId",
			(BiConsumer<UtenteOrganizzazioneCanaleComunicazione, Long>)
				UtenteOrganizzazioneCanaleComunicazione::setOrganizationId);
		attributeGetterFunctions.put(
			"canaleComunicazioneId",
			UtenteOrganizzazioneCanaleComunicazione::getCanaleComunicazioneId);
		attributeSetterBiConsumers.put(
			"canaleComunicazioneId",
			(BiConsumer<UtenteOrganizzazioneCanaleComunicazione, Long>)
				UtenteOrganizzazioneCanaleComunicazione::
					setCanaleComunicazioneId);
		attributeGetterFunctions.put(
			"groupId", UtenteOrganizzazioneCanaleComunicazione::getGroupId);
		attributeSetterBiConsumers.put(
			"groupId",
			(BiConsumer<UtenteOrganizzazioneCanaleComunicazione, Long>)
				UtenteOrganizzazioneCanaleComunicazione::setGroupId);
		attributeGetterFunctions.put(
			"companyId", UtenteOrganizzazioneCanaleComunicazione::getCompanyId);
		attributeSetterBiConsumers.put(
			"companyId",
			(BiConsumer<UtenteOrganizzazioneCanaleComunicazione, Long>)
				UtenteOrganizzazioneCanaleComunicazione::setCompanyId);
		attributeGetterFunctions.put(
			"userId", UtenteOrganizzazioneCanaleComunicazione::getUserId);
		attributeSetterBiConsumers.put(
			"userId",
			(BiConsumer<UtenteOrganizzazioneCanaleComunicazione, Long>)
				UtenteOrganizzazioneCanaleComunicazione::setUserId);
		attributeGetterFunctions.put(
			"userName", UtenteOrganizzazioneCanaleComunicazione::getUserName);
		attributeSetterBiConsumers.put(
			"userName",
			(BiConsumer<UtenteOrganizzazioneCanaleComunicazione, String>)
				UtenteOrganizzazioneCanaleComunicazione::setUserName);
		attributeGetterFunctions.put(
			"createDate",
			UtenteOrganizzazioneCanaleComunicazione::getCreateDate);
		attributeSetterBiConsumers.put(
			"createDate",
			(BiConsumer<UtenteOrganizzazioneCanaleComunicazione, Date>)
				UtenteOrganizzazioneCanaleComunicazione::setCreateDate);
		attributeGetterFunctions.put(
			"modifiedDate",
			UtenteOrganizzazioneCanaleComunicazione::getModifiedDate);
		attributeSetterBiConsumers.put(
			"modifiedDate",
			(BiConsumer<UtenteOrganizzazioneCanaleComunicazione, Date>)
				UtenteOrganizzazioneCanaleComunicazione::setModifiedDate);

		_attributeGetterFunctions = Collections.unmodifiableMap(
			attributeGetterFunctions);
		_attributeSetterBiConsumers = Collections.unmodifiableMap(
			(Map)attributeSetterBiConsumers);
	}

	@Override
	public String getUuid() {
		if (_uuid == null) {
			return "";
		}
		else {
			return _uuid;
		}
	}

	@Override
	public void setUuid(String uuid) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_uuid = uuid;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public String getOriginalUuid() {
		return getColumnOriginalValue("uuid_");
	}

	@Override
	public long getUtenteId() {
		return _utenteId;
	}

	@Override
	public void setUtenteId(long utenteId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_utenteId = utenteId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalUtenteId() {
		return GetterUtil.getLong(
			this.<Long>getColumnOriginalValue("utenteId"));
	}

	@Override
	public long getOrganizationId() {
		return _organizationId;
	}

	@Override
	public void setOrganizationId(long organizationId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_organizationId = organizationId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalOrganizationId() {
		return GetterUtil.getLong(
			this.<Long>getColumnOriginalValue("organizationId"));
	}

	@Override
	public long getCanaleComunicazioneId() {
		return _canaleComunicazioneId;
	}

	@Override
	public void setCanaleComunicazioneId(long canaleComunicazioneId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_canaleComunicazioneId = canaleComunicazioneId;
	}

	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_groupId = groupId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalGroupId() {
		return GetterUtil.getLong(this.<Long>getColumnOriginalValue("groupId"));
	}

	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_companyId = companyId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalCompanyId() {
		return GetterUtil.getLong(
			this.<Long>getColumnOriginalValue("companyId"));
	}

	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_userId = userId;
	}

	@Override
	public String getUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getUserId());

			return user.getUuid();
		}
		catch (PortalException portalException) {
			return "";
		}
	}

	@Override
	public void setUserUuid(String userUuid) {
	}

	@Override
	public String getUserName() {
		if (_userName == null) {
			return "";
		}
		else {
			return _userName;
		}
	}

	@Override
	public void setUserName(String userName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_userName = userName;
	}

	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_createDate = createDate;
	}

	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public boolean hasSetModifiedDate() {
		return _setModifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_setModifiedDate = true;

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_modifiedDate = modifiedDate;
	}

	@Override
	public StagedModelType getStagedModelType() {
		return new StagedModelType(
			PortalUtil.getClassNameId(
				UtenteOrganizzazioneCanaleComunicazione.class.getName()));
	}

	public long getColumnBitmask() {
		if (_columnBitmask > 0) {
			return _columnBitmask;
		}

		if ((_columnOriginalValues == null) ||
			(_columnOriginalValues == Collections.EMPTY_MAP)) {

			return 0;
		}

		for (Map.Entry<String, Object> entry :
				_columnOriginalValues.entrySet()) {

			if (!Objects.equals(
					entry.getValue(), getColumnValue(entry.getKey()))) {

				_columnBitmask |= _columnBitmasks.get(entry.getKey());
			}
		}

		return _columnBitmask;
	}

	@Override
	public UtenteOrganizzazioneCanaleComunicazione toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, UtenteOrganizzazioneCanaleComunicazione>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		UtenteOrganizzazioneCanaleComunicazioneImpl
			utenteOrganizzazioneCanaleComunicazioneImpl =
				new UtenteOrganizzazioneCanaleComunicazioneImpl();

		utenteOrganizzazioneCanaleComunicazioneImpl.setUuid(getUuid());
		utenteOrganizzazioneCanaleComunicazioneImpl.setUtenteId(getUtenteId());
		utenteOrganizzazioneCanaleComunicazioneImpl.setOrganizationId(
			getOrganizationId());
		utenteOrganizzazioneCanaleComunicazioneImpl.setCanaleComunicazioneId(
			getCanaleComunicazioneId());
		utenteOrganizzazioneCanaleComunicazioneImpl.setGroupId(getGroupId());
		utenteOrganizzazioneCanaleComunicazioneImpl.setCompanyId(
			getCompanyId());
		utenteOrganizzazioneCanaleComunicazioneImpl.setUserId(getUserId());
		utenteOrganizzazioneCanaleComunicazioneImpl.setUserName(getUserName());
		utenteOrganizzazioneCanaleComunicazioneImpl.setCreateDate(
			getCreateDate());
		utenteOrganizzazioneCanaleComunicazioneImpl.setModifiedDate(
			getModifiedDate());

		utenteOrganizzazioneCanaleComunicazioneImpl.resetOriginalValues();

		return utenteOrganizzazioneCanaleComunicazioneImpl;
	}

	@Override
	public UtenteOrganizzazioneCanaleComunicazione cloneWithOriginalValues() {
		UtenteOrganizzazioneCanaleComunicazioneImpl
			utenteOrganizzazioneCanaleComunicazioneImpl =
				new UtenteOrganizzazioneCanaleComunicazioneImpl();

		utenteOrganizzazioneCanaleComunicazioneImpl.setUuid(
			this.<String>getColumnOriginalValue("uuid_"));
		utenteOrganizzazioneCanaleComunicazioneImpl.setUtenteId(
			this.<Long>getColumnOriginalValue("utenteId"));
		utenteOrganizzazioneCanaleComunicazioneImpl.setOrganizationId(
			this.<Long>getColumnOriginalValue("organizationId"));
		utenteOrganizzazioneCanaleComunicazioneImpl.setCanaleComunicazioneId(
			this.<Long>getColumnOriginalValue("canaleComunicazioneId"));
		utenteOrganizzazioneCanaleComunicazioneImpl.setGroupId(
			this.<Long>getColumnOriginalValue("groupId"));
		utenteOrganizzazioneCanaleComunicazioneImpl.setCompanyId(
			this.<Long>getColumnOriginalValue("companyId"));
		utenteOrganizzazioneCanaleComunicazioneImpl.setUserId(
			this.<Long>getColumnOriginalValue("userId"));
		utenteOrganizzazioneCanaleComunicazioneImpl.setUserName(
			this.<String>getColumnOriginalValue("userName"));
		utenteOrganizzazioneCanaleComunicazioneImpl.setCreateDate(
			this.<Date>getColumnOriginalValue("createDate"));
		utenteOrganizzazioneCanaleComunicazioneImpl.setModifiedDate(
			this.<Date>getColumnOriginalValue("modifiedDate"));

		return utenteOrganizzazioneCanaleComunicazioneImpl;
	}

	@Override
	public int compareTo(
		UtenteOrganizzazioneCanaleComunicazione
			utenteOrganizzazioneCanaleComunicazione) {

		UtenteOrganizzazioneCanaleComunicazionePK primaryKey =
			utenteOrganizzazioneCanaleComunicazione.getPrimaryKey();

		return getPrimaryKey().compareTo(primaryKey);
	}

	@Override
	public boolean equals(Object object) {
		if (this == object) {
			return true;
		}

		if (!(object instanceof UtenteOrganizzazioneCanaleComunicazione)) {
			return false;
		}

		UtenteOrganizzazioneCanaleComunicazione
			utenteOrganizzazioneCanaleComunicazione =
				(UtenteOrganizzazioneCanaleComunicazione)object;

		UtenteOrganizzazioneCanaleComunicazionePK primaryKey =
			utenteOrganizzazioneCanaleComunicazione.getPrimaryKey();

		if (getPrimaryKey().equals(primaryKey)) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return getPrimaryKey().hashCode();
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isEntityCacheEnabled() {
		return true;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isFinderCacheEnabled() {
		return true;
	}

	@Override
	public void resetOriginalValues() {
		_columnOriginalValues = Collections.emptyMap();

		_setModifiedDate = false;

		_columnBitmask = 0;
	}

	@Override
	public CacheModel<UtenteOrganizzazioneCanaleComunicazione> toCacheModel() {
		UtenteOrganizzazioneCanaleComunicazioneCacheModel
			utenteOrganizzazioneCanaleComunicazioneCacheModel =
				new UtenteOrganizzazioneCanaleComunicazioneCacheModel();

		utenteOrganizzazioneCanaleComunicazioneCacheModel.
			utenteOrganizzazioneCanaleComunicazionePK = getPrimaryKey();

		utenteOrganizzazioneCanaleComunicazioneCacheModel.uuid = getUuid();

		String uuid = utenteOrganizzazioneCanaleComunicazioneCacheModel.uuid;

		if ((uuid != null) && (uuid.length() == 0)) {
			utenteOrganizzazioneCanaleComunicazioneCacheModel.uuid = null;
		}

		utenteOrganizzazioneCanaleComunicazioneCacheModel.utenteId =
			getUtenteId();

		utenteOrganizzazioneCanaleComunicazioneCacheModel.organizationId =
			getOrganizationId();

		utenteOrganizzazioneCanaleComunicazioneCacheModel.
			canaleComunicazioneId = getCanaleComunicazioneId();

		utenteOrganizzazioneCanaleComunicazioneCacheModel.groupId =
			getGroupId();

		utenteOrganizzazioneCanaleComunicazioneCacheModel.companyId =
			getCompanyId();

		utenteOrganizzazioneCanaleComunicazioneCacheModel.userId = getUserId();

		utenteOrganizzazioneCanaleComunicazioneCacheModel.userName =
			getUserName();

		String userName =
			utenteOrganizzazioneCanaleComunicazioneCacheModel.userName;

		if ((userName != null) && (userName.length() == 0)) {
			utenteOrganizzazioneCanaleComunicazioneCacheModel.userName = null;
		}

		Date createDate = getCreateDate();

		if (createDate != null) {
			utenteOrganizzazioneCanaleComunicazioneCacheModel.createDate =
				createDate.getTime();
		}
		else {
			utenteOrganizzazioneCanaleComunicazioneCacheModel.createDate =
				Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			utenteOrganizzazioneCanaleComunicazioneCacheModel.modifiedDate =
				modifiedDate.getTime();
		}
		else {
			utenteOrganizzazioneCanaleComunicazioneCacheModel.modifiedDate =
				Long.MIN_VALUE;
		}

		return utenteOrganizzazioneCanaleComunicazioneCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<UtenteOrganizzazioneCanaleComunicazione, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 2);

		sb.append("{");

		for (Map.Entry
				<String,
				 Function<UtenteOrganizzazioneCanaleComunicazione, Object>>
					entry : attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<UtenteOrganizzazioneCanaleComunicazione, Object>
				attributeGetterFunction = entry.getValue();

			sb.append("\"");
			sb.append(attributeName);
			sb.append("\": ");

			Object value = attributeGetterFunction.apply(
				(UtenteOrganizzazioneCanaleComunicazione)this);

			if (value == null) {
				sb.append("null");
			}
			else if (value instanceof Blob || value instanceof Date ||
					 value instanceof Map || value instanceof String) {

				sb.append(
					"\"" + StringUtil.replace(value.toString(), "\"", "'") +
						"\"");
			}
			else {
				sb.append(value);
			}

			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		Map<String, Function<UtenteOrganizzazioneCanaleComunicazione, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 4);

		sb.append("<model><model-name>");
		sb.append(getModelClassName());
		sb.append("</model-name>");

		for (Map.Entry
				<String,
				 Function<UtenteOrganizzazioneCanaleComunicazione, Object>>
					entry : attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<UtenteOrganizzazioneCanaleComunicazione, Object>
				attributeGetterFunction = entry.getValue();

			sb.append("<column><column-name>");
			sb.append(attributeName);
			sb.append("</column-name><column-value><![CDATA[");
			sb.append(
				attributeGetterFunction.apply(
					(UtenteOrganizzazioneCanaleComunicazione)this));
			sb.append("]]></column-value></column>");
		}

		sb.append("</model>");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function
			<InvocationHandler, UtenteOrganizzazioneCanaleComunicazione>
				_escapedModelProxyProviderFunction =
					_getProxyProviderFunction();

	}

	private String _uuid;
	private long _utenteId;
	private long _organizationId;
	private long _canaleComunicazioneId;
	private long _groupId;
	private long _companyId;
	private long _userId;
	private String _userName;
	private Date _createDate;
	private Date _modifiedDate;
	private boolean _setModifiedDate;

	public <T> T getColumnValue(String columnName) {
		columnName = _attributeNames.getOrDefault(columnName, columnName);

		Function<UtenteOrganizzazioneCanaleComunicazione, Object> function =
			_attributeGetterFunctions.get(columnName);

		if (function == null) {
			throw new IllegalArgumentException(
				"No attribute getter function found for " + columnName);
		}

		return (T)function.apply((UtenteOrganizzazioneCanaleComunicazione)this);
	}

	public <T> T getColumnOriginalValue(String columnName) {
		if (_columnOriginalValues == null) {
			return null;
		}

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		return (T)_columnOriginalValues.get(columnName);
	}

	private void _setColumnOriginalValues() {
		_columnOriginalValues = new HashMap<String, Object>();

		_columnOriginalValues.put("uuid_", _uuid);
		_columnOriginalValues.put("utenteId", _utenteId);
		_columnOriginalValues.put("organizationId", _organizationId);
		_columnOriginalValues.put(
			"canaleComunicazioneId", _canaleComunicazioneId);
		_columnOriginalValues.put("groupId", _groupId);
		_columnOriginalValues.put("companyId", _companyId);
		_columnOriginalValues.put("userId", _userId);
		_columnOriginalValues.put("userName", _userName);
		_columnOriginalValues.put("createDate", _createDate);
		_columnOriginalValues.put("modifiedDate", _modifiedDate);
	}

	private static final Map<String, String> _attributeNames;

	static {
		Map<String, String> attributeNames = new HashMap<>();

		attributeNames.put("uuid_", "uuid");

		_attributeNames = Collections.unmodifiableMap(attributeNames);
	}

	private transient Map<String, Object> _columnOriginalValues;

	public static long getColumnBitmask(String columnName) {
		return _columnBitmasks.get(columnName);
	}

	private static final Map<String, Long> _columnBitmasks;

	static {
		Map<String, Long> columnBitmasks = new HashMap<>();

		columnBitmasks.put("uuid_", 1L);

		columnBitmasks.put("utenteId", 2L);

		columnBitmasks.put("organizationId", 4L);

		columnBitmasks.put("canaleComunicazioneId", 8L);

		columnBitmasks.put("groupId", 16L);

		columnBitmasks.put("companyId", 32L);

		columnBitmasks.put("userId", 64L);

		columnBitmasks.put("userName", 128L);

		columnBitmasks.put("createDate", 256L);

		columnBitmasks.put("modifiedDate", 512L);

		_columnBitmasks = Collections.unmodifiableMap(columnBitmasks);
	}

	private long _columnBitmask;
	private UtenteOrganizzazioneCanaleComunicazione _escapedModel;

}