/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package it.servizidigitali.gestioneforms.model.impl;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.exportimport.kernel.lar.StagedModelType;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.User;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.service.UserLocalServiceUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.PortalUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringUtil;

import it.servizidigitali.gestioneforms.model.TipoDocumento;
import it.servizidigitali.gestioneforms.model.TipoDocumentoModel;

import java.io.Serializable;

import java.lang.reflect.Constructor;
import java.lang.reflect.InvocationHandler;

import java.sql.Blob;
import java.sql.Types;

import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.Objects;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the TipoDocumento service. Represents a row in the &quot;tipo_documento&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>TipoDocumentoModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link TipoDocumentoImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see TipoDocumentoImpl
 * @generated
 */
public class TipoDocumentoModelImpl
	extends BaseModelImpl<TipoDocumento> implements TipoDocumentoModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a tipo documento model instance should use the <code>TipoDocumento</code> interface instead.
	 */
	public static final String TABLE_NAME = "tipo_documento";

	public static final Object[][] TABLE_COLUMNS = {
		{"uuid_", Types.VARCHAR}, {"tipoDocumentoId", Types.BIGINT},
		{"groupId", Types.BIGINT}, {"companyId", Types.BIGINT},
		{"userId", Types.BIGINT}, {"userName", Types.VARCHAR},
		{"createDate", Types.TIMESTAMP}, {"modifiedDate", Types.TIMESTAMP},
		{"codice", Types.VARCHAR}, {"nome", Types.VARCHAR},
		{"descrizione", Types.VARCHAR}, {"categoria", Types.VARCHAR},
		{"estensioniFile", Types.VARCHAR}, {"stato", Types.VARCHAR},
		{"numeroRequired", Types.BIGINT}, {"dataScadenzaRequired", Types.BIGINT}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("uuid_", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("tipoDocumentoId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("groupId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("companyId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("createDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("modifiedDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("codice", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("nome", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("descrizione", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("categoria", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("estensioniFile", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("stato", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("numeroRequired", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("dataScadenzaRequired", Types.BIGINT);
	}

	public static final String TABLE_SQL_CREATE =
		"create table tipo_documento (uuid_ VARCHAR(75) null,tipoDocumentoId LONG not null primary key,groupId LONG,companyId LONG,userId LONG,userName VARCHAR(75) null,createDate DATE null,modifiedDate DATE null,codice VARCHAR(75) null,nome VARCHAR(75) null,descrizione VARCHAR(75) null,categoria VARCHAR(75) null,estensioniFile VARCHAR(75) null,stato VARCHAR(75) null,numeroRequired LONG,dataScadenzaRequired LONG)";

	public static final String TABLE_SQL_DROP = "drop table tipo_documento";

	public static final String ORDER_BY_JPQL =
		" ORDER BY tipoDocumento.nome ASC";

	public static final String ORDER_BY_SQL =
		" ORDER BY tipo_documento.nome ASC";

	public static final String DATA_SOURCE = "servizidigitaliDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long COMPANYID_COLUMN_BITMASK = 1L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long GROUPID_COLUMN_BITMASK = 2L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long STATO_COLUMN_BITMASK = 4L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long UUID_COLUMN_BITMASK = 8L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *		#getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long NOME_COLUMN_BITMASK = 16L;

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
	}

	public TipoDocumentoModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _tipoDocumentoId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setTipoDocumentoId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _tipoDocumentoId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return TipoDocumento.class;
	}

	@Override
	public String getModelClassName() {
		return TipoDocumento.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<TipoDocumento, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		for (Map.Entry<String, Function<TipoDocumento, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<TipoDocumento, Object> attributeGetterFunction =
				entry.getValue();

			attributes.put(
				attributeName,
				attributeGetterFunction.apply((TipoDocumento)this));
		}

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<TipoDocumento, Object>>
			attributeSetterBiConsumers = getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<TipoDocumento, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(TipoDocumento)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<TipoDocumento, Object>>
		getAttributeGetterFunctions() {

		return _attributeGetterFunctions;
	}

	public Map<String, BiConsumer<TipoDocumento, Object>>
		getAttributeSetterBiConsumers() {

		return _attributeSetterBiConsumers;
	}

	private static Function<InvocationHandler, TipoDocumento>
		_getProxyProviderFunction() {

		Class<?> proxyClass = ProxyUtil.getProxyClass(
			TipoDocumento.class.getClassLoader(), TipoDocumento.class,
			ModelWrapper.class);

		try {
			Constructor<TipoDocumento> constructor =
				(Constructor<TipoDocumento>)proxyClass.getConstructor(
					InvocationHandler.class);

			return invocationHandler -> {
				try {
					return constructor.newInstance(invocationHandler);
				}
				catch (ReflectiveOperationException
							reflectiveOperationException) {

					throw new InternalError(reflectiveOperationException);
				}
			};
		}
		catch (NoSuchMethodException noSuchMethodException) {
			throw new InternalError(noSuchMethodException);
		}
	}

	private static final Map<String, Function<TipoDocumento, Object>>
		_attributeGetterFunctions;
	private static final Map<String, BiConsumer<TipoDocumento, Object>>
		_attributeSetterBiConsumers;

	static {
		Map<String, Function<TipoDocumento, Object>> attributeGetterFunctions =
			new LinkedHashMap<String, Function<TipoDocumento, Object>>();
		Map<String, BiConsumer<TipoDocumento, ?>> attributeSetterBiConsumers =
			new LinkedHashMap<String, BiConsumer<TipoDocumento, ?>>();

		attributeGetterFunctions.put("uuid", TipoDocumento::getUuid);
		attributeSetterBiConsumers.put(
			"uuid", (BiConsumer<TipoDocumento, String>)TipoDocumento::setUuid);
		attributeGetterFunctions.put(
			"tipoDocumentoId", TipoDocumento::getTipoDocumentoId);
		attributeSetterBiConsumers.put(
			"tipoDocumentoId",
			(BiConsumer<TipoDocumento, Long>)TipoDocumento::setTipoDocumentoId);
		attributeGetterFunctions.put("groupId", TipoDocumento::getGroupId);
		attributeSetterBiConsumers.put(
			"groupId",
			(BiConsumer<TipoDocumento, Long>)TipoDocumento::setGroupId);
		attributeGetterFunctions.put("companyId", TipoDocumento::getCompanyId);
		attributeSetterBiConsumers.put(
			"companyId",
			(BiConsumer<TipoDocumento, Long>)TipoDocumento::setCompanyId);
		attributeGetterFunctions.put("userId", TipoDocumento::getUserId);
		attributeSetterBiConsumers.put(
			"userId",
			(BiConsumer<TipoDocumento, Long>)TipoDocumento::setUserId);
		attributeGetterFunctions.put("userName", TipoDocumento::getUserName);
		attributeSetterBiConsumers.put(
			"userName",
			(BiConsumer<TipoDocumento, String>)TipoDocumento::setUserName);
		attributeGetterFunctions.put(
			"createDate", TipoDocumento::getCreateDate);
		attributeSetterBiConsumers.put(
			"createDate",
			(BiConsumer<TipoDocumento, Date>)TipoDocumento::setCreateDate);
		attributeGetterFunctions.put(
			"modifiedDate", TipoDocumento::getModifiedDate);
		attributeSetterBiConsumers.put(
			"modifiedDate",
			(BiConsumer<TipoDocumento, Date>)TipoDocumento::setModifiedDate);
		attributeGetterFunctions.put("codice", TipoDocumento::getCodice);
		attributeSetterBiConsumers.put(
			"codice",
			(BiConsumer<TipoDocumento, String>)TipoDocumento::setCodice);
		attributeGetterFunctions.put("nome", TipoDocumento::getNome);
		attributeSetterBiConsumers.put(
			"nome", (BiConsumer<TipoDocumento, String>)TipoDocumento::setNome);
		attributeGetterFunctions.put(
			"descrizione", TipoDocumento::getDescrizione);
		attributeSetterBiConsumers.put(
			"descrizione",
			(BiConsumer<TipoDocumento, String>)TipoDocumento::setDescrizione);
		attributeGetterFunctions.put("categoria", TipoDocumento::getCategoria);
		attributeSetterBiConsumers.put(
			"categoria",
			(BiConsumer<TipoDocumento, String>)TipoDocumento::setCategoria);
		attributeGetterFunctions.put(
			"estensioniFile", TipoDocumento::getEstensioniFile);
		attributeSetterBiConsumers.put(
			"estensioniFile",
			(BiConsumer<TipoDocumento, String>)
				TipoDocumento::setEstensioniFile);
		attributeGetterFunctions.put("stato", TipoDocumento::getStato);
		attributeSetterBiConsumers.put(
			"stato",
			(BiConsumer<TipoDocumento, String>)TipoDocumento::setStato);
		attributeGetterFunctions.put(
			"numeroRequired", TipoDocumento::getNumeroRequired);
		attributeSetterBiConsumers.put(
			"numeroRequired",
			(BiConsumer<TipoDocumento, Long>)TipoDocumento::setNumeroRequired);
		attributeGetterFunctions.put(
			"dataScadenzaRequired", TipoDocumento::getDataScadenzaRequired);
		attributeSetterBiConsumers.put(
			"dataScadenzaRequired",
			(BiConsumer<TipoDocumento, Long>)
				TipoDocumento::setDataScadenzaRequired);

		_attributeGetterFunctions = Collections.unmodifiableMap(
			attributeGetterFunctions);
		_attributeSetterBiConsumers = Collections.unmodifiableMap(
			(Map)attributeSetterBiConsumers);
	}

	@Override
	public String getUuid() {
		if (_uuid == null) {
			return "";
		}
		else {
			return _uuid;
		}
	}

	@Override
	public void setUuid(String uuid) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_uuid = uuid;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public String getOriginalUuid() {
		return getColumnOriginalValue("uuid_");
	}

	@Override
	public long getTipoDocumentoId() {
		return _tipoDocumentoId;
	}

	@Override
	public void setTipoDocumentoId(long tipoDocumentoId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_tipoDocumentoId = tipoDocumentoId;
	}

	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_groupId = groupId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalGroupId() {
		return GetterUtil.getLong(this.<Long>getColumnOriginalValue("groupId"));
	}

	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_companyId = companyId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalCompanyId() {
		return GetterUtil.getLong(
			this.<Long>getColumnOriginalValue("companyId"));
	}

	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_userId = userId;
	}

	@Override
	public String getUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getUserId());

			return user.getUuid();
		}
		catch (PortalException portalException) {
			return "";
		}
	}

	@Override
	public void setUserUuid(String userUuid) {
	}

	@Override
	public String getUserName() {
		if (_userName == null) {
			return "";
		}
		else {
			return _userName;
		}
	}

	@Override
	public void setUserName(String userName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_userName = userName;
	}

	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_createDate = createDate;
	}

	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public boolean hasSetModifiedDate() {
		return _setModifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_setModifiedDate = true;

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_modifiedDate = modifiedDate;
	}

	@Override
	public String getCodice() {
		if (_codice == null) {
			return "";
		}
		else {
			return _codice;
		}
	}

	@Override
	public void setCodice(String codice) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_codice = codice;
	}

	@Override
	public String getNome() {
		if (_nome == null) {
			return "";
		}
		else {
			return _nome;
		}
	}

	@Override
	public void setNome(String nome) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_nome = nome;
	}

	@Override
	public String getDescrizione() {
		if (_descrizione == null) {
			return "";
		}
		else {
			return _descrizione;
		}
	}

	@Override
	public void setDescrizione(String descrizione) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_descrizione = descrizione;
	}

	@Override
	public String getCategoria() {
		if (_categoria == null) {
			return "";
		}
		else {
			return _categoria;
		}
	}

	@Override
	public void setCategoria(String categoria) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_categoria = categoria;
	}

	@Override
	public String getEstensioniFile() {
		if (_estensioniFile == null) {
			return "";
		}
		else {
			return _estensioniFile;
		}
	}

	@Override
	public void setEstensioniFile(String estensioniFile) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_estensioniFile = estensioniFile;
	}

	@Override
	public String getStato() {
		if (_stato == null) {
			return "";
		}
		else {
			return _stato;
		}
	}

	@Override
	public void setStato(String stato) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_stato = stato;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public String getOriginalStato() {
		return getColumnOriginalValue("stato");
	}

	@Override
	public long getNumeroRequired() {
		return _numeroRequired;
	}

	@Override
	public void setNumeroRequired(long numeroRequired) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_numeroRequired = numeroRequired;
	}

	@Override
	public long getDataScadenzaRequired() {
		return _dataScadenzaRequired;
	}

	@Override
	public void setDataScadenzaRequired(long dataScadenzaRequired) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_dataScadenzaRequired = dataScadenzaRequired;
	}

	@Override
	public StagedModelType getStagedModelType() {
		return new StagedModelType(
			PortalUtil.getClassNameId(TipoDocumento.class.getName()));
	}

	public long getColumnBitmask() {
		if (_columnBitmask > 0) {
			return _columnBitmask;
		}

		if ((_columnOriginalValues == null) ||
			(_columnOriginalValues == Collections.EMPTY_MAP)) {

			return 0;
		}

		for (Map.Entry<String, Object> entry :
				_columnOriginalValues.entrySet()) {

			if (!Objects.equals(
					entry.getValue(), getColumnValue(entry.getKey()))) {

				_columnBitmask |= _columnBitmasks.get(entry.getKey());
			}
		}

		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			getCompanyId(), TipoDocumento.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public TipoDocumento toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, TipoDocumento>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		TipoDocumentoImpl tipoDocumentoImpl = new TipoDocumentoImpl();

		tipoDocumentoImpl.setUuid(getUuid());
		tipoDocumentoImpl.setTipoDocumentoId(getTipoDocumentoId());
		tipoDocumentoImpl.setGroupId(getGroupId());
		tipoDocumentoImpl.setCompanyId(getCompanyId());
		tipoDocumentoImpl.setUserId(getUserId());
		tipoDocumentoImpl.setUserName(getUserName());
		tipoDocumentoImpl.setCreateDate(getCreateDate());
		tipoDocumentoImpl.setModifiedDate(getModifiedDate());
		tipoDocumentoImpl.setCodice(getCodice());
		tipoDocumentoImpl.setNome(getNome());
		tipoDocumentoImpl.setDescrizione(getDescrizione());
		tipoDocumentoImpl.setCategoria(getCategoria());
		tipoDocumentoImpl.setEstensioniFile(getEstensioniFile());
		tipoDocumentoImpl.setStato(getStato());
		tipoDocumentoImpl.setNumeroRequired(getNumeroRequired());
		tipoDocumentoImpl.setDataScadenzaRequired(getDataScadenzaRequired());

		tipoDocumentoImpl.resetOriginalValues();

		return tipoDocumentoImpl;
	}

	@Override
	public TipoDocumento cloneWithOriginalValues() {
		TipoDocumentoImpl tipoDocumentoImpl = new TipoDocumentoImpl();

		tipoDocumentoImpl.setUuid(this.<String>getColumnOriginalValue("uuid_"));
		tipoDocumentoImpl.setTipoDocumentoId(
			this.<Long>getColumnOriginalValue("tipoDocumentoId"));
		tipoDocumentoImpl.setGroupId(
			this.<Long>getColumnOriginalValue("groupId"));
		tipoDocumentoImpl.setCompanyId(
			this.<Long>getColumnOriginalValue("companyId"));
		tipoDocumentoImpl.setUserId(
			this.<Long>getColumnOriginalValue("userId"));
		tipoDocumentoImpl.setUserName(
			this.<String>getColumnOriginalValue("userName"));
		tipoDocumentoImpl.setCreateDate(
			this.<Date>getColumnOriginalValue("createDate"));
		tipoDocumentoImpl.setModifiedDate(
			this.<Date>getColumnOriginalValue("modifiedDate"));
		tipoDocumentoImpl.setCodice(
			this.<String>getColumnOriginalValue("codice"));
		tipoDocumentoImpl.setNome(this.<String>getColumnOriginalValue("nome"));
		tipoDocumentoImpl.setDescrizione(
			this.<String>getColumnOriginalValue("descrizione"));
		tipoDocumentoImpl.setCategoria(
			this.<String>getColumnOriginalValue("categoria"));
		tipoDocumentoImpl.setEstensioniFile(
			this.<String>getColumnOriginalValue("estensioniFile"));
		tipoDocumentoImpl.setStato(
			this.<String>getColumnOriginalValue("stato"));
		tipoDocumentoImpl.setNumeroRequired(
			this.<Long>getColumnOriginalValue("numeroRequired"));
		tipoDocumentoImpl.setDataScadenzaRequired(
			this.<Long>getColumnOriginalValue("dataScadenzaRequired"));

		return tipoDocumentoImpl;
	}

	@Override
	public int compareTo(TipoDocumento tipoDocumento) {
		int value = 0;

		value = getNome().compareTo(tipoDocumento.getNome());

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object object) {
		if (this == object) {
			return true;
		}

		if (!(object instanceof TipoDocumento)) {
			return false;
		}

		TipoDocumento tipoDocumento = (TipoDocumento)object;

		long primaryKey = tipoDocumento.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isEntityCacheEnabled() {
		return true;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isFinderCacheEnabled() {
		return true;
	}

	@Override
	public void resetOriginalValues() {
		_columnOriginalValues = Collections.emptyMap();

		_setModifiedDate = false;

		_columnBitmask = 0;
	}

	@Override
	public CacheModel<TipoDocumento> toCacheModel() {
		TipoDocumentoCacheModel tipoDocumentoCacheModel =
			new TipoDocumentoCacheModel();

		tipoDocumentoCacheModel.uuid = getUuid();

		String uuid = tipoDocumentoCacheModel.uuid;

		if ((uuid != null) && (uuid.length() == 0)) {
			tipoDocumentoCacheModel.uuid = null;
		}

		tipoDocumentoCacheModel.tipoDocumentoId = getTipoDocumentoId();

		tipoDocumentoCacheModel.groupId = getGroupId();

		tipoDocumentoCacheModel.companyId = getCompanyId();

		tipoDocumentoCacheModel.userId = getUserId();

		tipoDocumentoCacheModel.userName = getUserName();

		String userName = tipoDocumentoCacheModel.userName;

		if ((userName != null) && (userName.length() == 0)) {
			tipoDocumentoCacheModel.userName = null;
		}

		Date createDate = getCreateDate();

		if (createDate != null) {
			tipoDocumentoCacheModel.createDate = createDate.getTime();
		}
		else {
			tipoDocumentoCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			tipoDocumentoCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			tipoDocumentoCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		tipoDocumentoCacheModel.codice = getCodice();

		String codice = tipoDocumentoCacheModel.codice;

		if ((codice != null) && (codice.length() == 0)) {
			tipoDocumentoCacheModel.codice = null;
		}

		tipoDocumentoCacheModel.nome = getNome();

		String nome = tipoDocumentoCacheModel.nome;

		if ((nome != null) && (nome.length() == 0)) {
			tipoDocumentoCacheModel.nome = null;
		}

		tipoDocumentoCacheModel.descrizione = getDescrizione();

		String descrizione = tipoDocumentoCacheModel.descrizione;

		if ((descrizione != null) && (descrizione.length() == 0)) {
			tipoDocumentoCacheModel.descrizione = null;
		}

		tipoDocumentoCacheModel.categoria = getCategoria();

		String categoria = tipoDocumentoCacheModel.categoria;

		if ((categoria != null) && (categoria.length() == 0)) {
			tipoDocumentoCacheModel.categoria = null;
		}

		tipoDocumentoCacheModel.estensioniFile = getEstensioniFile();

		String estensioniFile = tipoDocumentoCacheModel.estensioniFile;

		if ((estensioniFile != null) && (estensioniFile.length() == 0)) {
			tipoDocumentoCacheModel.estensioniFile = null;
		}

		tipoDocumentoCacheModel.stato = getStato();

		String stato = tipoDocumentoCacheModel.stato;

		if ((stato != null) && (stato.length() == 0)) {
			tipoDocumentoCacheModel.stato = null;
		}

		tipoDocumentoCacheModel.numeroRequired = getNumeroRequired();

		tipoDocumentoCacheModel.dataScadenzaRequired =
			getDataScadenzaRequired();

		return tipoDocumentoCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<TipoDocumento, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 2);

		sb.append("{");

		for (Map.Entry<String, Function<TipoDocumento, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<TipoDocumento, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("\"");
			sb.append(attributeName);
			sb.append("\": ");

			Object value = attributeGetterFunction.apply((TipoDocumento)this);

			if (value == null) {
				sb.append("null");
			}
			else if (value instanceof Blob || value instanceof Date ||
					 value instanceof Map || value instanceof String) {

				sb.append(
					"\"" + StringUtil.replace(value.toString(), "\"", "'") +
						"\"");
			}
			else {
				sb.append(value);
			}

			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		Map<String, Function<TipoDocumento, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 4);

		sb.append("<model><model-name>");
		sb.append(getModelClassName());
		sb.append("</model-name>");

		for (Map.Entry<String, Function<TipoDocumento, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<TipoDocumento, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("<column><column-name>");
			sb.append(attributeName);
			sb.append("</column-name><column-value><![CDATA[");
			sb.append(attributeGetterFunction.apply((TipoDocumento)this));
			sb.append("]]></column-value></column>");
		}

		sb.append("</model>");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function<InvocationHandler, TipoDocumento>
			_escapedModelProxyProviderFunction = _getProxyProviderFunction();

	}

	private String _uuid;
	private long _tipoDocumentoId;
	private long _groupId;
	private long _companyId;
	private long _userId;
	private String _userName;
	private Date _createDate;
	private Date _modifiedDate;
	private boolean _setModifiedDate;
	private String _codice;
	private String _nome;
	private String _descrizione;
	private String _categoria;
	private String _estensioniFile;
	private String _stato;
	private long _numeroRequired;
	private long _dataScadenzaRequired;

	public <T> T getColumnValue(String columnName) {
		columnName = _attributeNames.getOrDefault(columnName, columnName);

		Function<TipoDocumento, Object> function =
			_attributeGetterFunctions.get(columnName);

		if (function == null) {
			throw new IllegalArgumentException(
				"No attribute getter function found for " + columnName);
		}

		return (T)function.apply((TipoDocumento)this);
	}

	public <T> T getColumnOriginalValue(String columnName) {
		if (_columnOriginalValues == null) {
			return null;
		}

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		return (T)_columnOriginalValues.get(columnName);
	}

	private void _setColumnOriginalValues() {
		_columnOriginalValues = new HashMap<String, Object>();

		_columnOriginalValues.put("uuid_", _uuid);
		_columnOriginalValues.put("tipoDocumentoId", _tipoDocumentoId);
		_columnOriginalValues.put("groupId", _groupId);
		_columnOriginalValues.put("companyId", _companyId);
		_columnOriginalValues.put("userId", _userId);
		_columnOriginalValues.put("userName", _userName);
		_columnOriginalValues.put("createDate", _createDate);
		_columnOriginalValues.put("modifiedDate", _modifiedDate);
		_columnOriginalValues.put("codice", _codice);
		_columnOriginalValues.put("nome", _nome);
		_columnOriginalValues.put("descrizione", _descrizione);
		_columnOriginalValues.put("categoria", _categoria);
		_columnOriginalValues.put("estensioniFile", _estensioniFile);
		_columnOriginalValues.put("stato", _stato);
		_columnOriginalValues.put("numeroRequired", _numeroRequired);
		_columnOriginalValues.put(
			"dataScadenzaRequired", _dataScadenzaRequired);
	}

	private static final Map<String, String> _attributeNames;

	static {
		Map<String, String> attributeNames = new HashMap<>();

		attributeNames.put("uuid_", "uuid");

		_attributeNames = Collections.unmodifiableMap(attributeNames);
	}

	private transient Map<String, Object> _columnOriginalValues;

	public static long getColumnBitmask(String columnName) {
		return _columnBitmasks.get(columnName);
	}

	private static final Map<String, Long> _columnBitmasks;

	static {
		Map<String, Long> columnBitmasks = new HashMap<>();

		columnBitmasks.put("uuid_", 1L);

		columnBitmasks.put("tipoDocumentoId", 2L);

		columnBitmasks.put("groupId", 4L);

		columnBitmasks.put("companyId", 8L);

		columnBitmasks.put("userId", 16L);

		columnBitmasks.put("userName", 32L);

		columnBitmasks.put("createDate", 64L);

		columnBitmasks.put("modifiedDate", 128L);

		columnBitmasks.put("codice", 256L);

		columnBitmasks.put("nome", 512L);

		columnBitmasks.put("descrizione", 1024L);

		columnBitmasks.put("categoria", 2048L);

		columnBitmasks.put("estensioniFile", 4096L);

		columnBitmasks.put("stato", 8192L);

		columnBitmasks.put("numeroRequired", 16384L);

		columnBitmasks.put("dataScadenzaRequired", 32768L);

		_columnBitmasks = Collections.unmodifiableMap(columnBitmasks);
	}

	private long _columnBitmask;
	private TipoDocumento _escapedModel;

}