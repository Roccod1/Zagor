/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package it.servizidigitali.gestioneprocedure.model.impl;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.exportimport.kernel.lar.StagedModelType;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.User;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.service.UserLocalServiceUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.PortalUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringUtil;

import it.servizidigitali.gestioneprocedure.model.Procedura;
import it.servizidigitali.gestioneprocedure.model.ProceduraModel;

import java.io.Serializable;

import java.lang.reflect.Constructor;
import java.lang.reflect.InvocationHandler;

import java.sql.Blob;
import java.sql.Types;

import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.Objects;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the Procedura service. Represents a row in the &quot;procedura&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>ProceduraModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link ProceduraImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see ProceduraImpl
 * @generated
 */
public class ProceduraModelImpl
	extends BaseModelImpl<Procedura> implements ProceduraModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a procedura model instance should use the <code>Procedura</code> interface instead.
	 */
	public static final String TABLE_NAME = "procedura";

	public static final Object[][] TABLE_COLUMNS = {
		{"uuid_", Types.VARCHAR}, {"proceduraId", Types.BIGINT},
		{"groupId", Types.BIGINT}, {"companyId", Types.BIGINT},
		{"userId", Types.BIGINT}, {"userName", Types.VARCHAR},
		{"createDate", Types.TIMESTAMP}, {"modifiedDate", Types.TIMESTAMP},
		{"nome", Types.VARCHAR}, {"pecDestinazione", Types.VARCHAR},
		{"step1Attivo", Types.BOOLEAN},
		{"step1TipoComponentiNucleoFamiliare", Types.VARCHAR},
		{"step2TipoServizio", Types.VARCHAR},
		{"step2TipiIntegrazioneBackoffice", Types.VARCHAR},
		{"abilitaCacheIntegrazioneBackoffice", Types.BOOLEAN},
		{"tipoGenerazionePDF", Types.VARCHAR}, {"attiva", Types.BOOLEAN},
		{"servizioId", Types.BIGINT}, {"processoId", Types.BIGINT}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("uuid_", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("proceduraId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("groupId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("companyId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("createDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("modifiedDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("nome", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("pecDestinazione", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("step1Attivo", Types.BOOLEAN);
		TABLE_COLUMNS_MAP.put(
			"step1TipoComponentiNucleoFamiliare", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("step2TipoServizio", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("step2TipiIntegrazioneBackoffice", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put(
			"abilitaCacheIntegrazioneBackoffice", Types.BOOLEAN);
		TABLE_COLUMNS_MAP.put("tipoGenerazionePDF", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("attiva", Types.BOOLEAN);
		TABLE_COLUMNS_MAP.put("servizioId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("processoId", Types.BIGINT);
	}

	public static final String TABLE_SQL_CREATE =
		"create table procedura (uuid_ VARCHAR(75) null,proceduraId LONG not null primary key,groupId LONG,companyId LONG,userId LONG,userName VARCHAR(75) null,createDate DATE null,modifiedDate DATE null,nome VARCHAR(75) null,pecDestinazione VARCHAR(75) null,step1Attivo BOOLEAN,step1TipoComponentiNucleoFamiliare VARCHAR(75) null,step2TipoServizio VARCHAR(75) null,step2TipiIntegrazioneBackoffice VARCHAR(75) null,abilitaCacheIntegrazioneBackoffice BOOLEAN,tipoGenerazionePDF VARCHAR(75) null,attiva BOOLEAN,servizioId LONG,processoId LONG)";

	public static final String TABLE_SQL_DROP = "drop table procedura";

	public static final String ORDER_BY_JPQL =
		" ORDER BY procedura.proceduraId ASC";

	public static final String ORDER_BY_SQL =
		" ORDER BY procedura.proceduraId ASC";

	public static final String DATA_SOURCE = "servizidigitaliDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long ATTIVA_COLUMN_BITMASK = 1L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long COMPANYID_COLUMN_BITMASK = 2L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long GROUPID_COLUMN_BITMASK = 4L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long PROCESSOID_COLUMN_BITMASK = 8L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long SERVIZIOID_COLUMN_BITMASK = 16L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long UUID_COLUMN_BITMASK = 32L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *		#getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long PROCEDURAID_COLUMN_BITMASK = 64L;

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
	}

	public ProceduraModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _proceduraId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setProceduraId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _proceduraId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return Procedura.class;
	}

	@Override
	public String getModelClassName() {
		return Procedura.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<Procedura, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		for (Map.Entry<String, Function<Procedura, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<Procedura, Object> attributeGetterFunction =
				entry.getValue();

			attributes.put(
				attributeName, attributeGetterFunction.apply((Procedura)this));
		}

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<Procedura, Object>> attributeSetterBiConsumers =
			getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<Procedura, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(Procedura)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<Procedura, Object>>
		getAttributeGetterFunctions() {

		return _attributeGetterFunctions;
	}

	public Map<String, BiConsumer<Procedura, Object>>
		getAttributeSetterBiConsumers() {

		return _attributeSetterBiConsumers;
	}

	private static Function<InvocationHandler, Procedura>
		_getProxyProviderFunction() {

		Class<?> proxyClass = ProxyUtil.getProxyClass(
			Procedura.class.getClassLoader(), Procedura.class,
			ModelWrapper.class);

		try {
			Constructor<Procedura> constructor =
				(Constructor<Procedura>)proxyClass.getConstructor(
					InvocationHandler.class);

			return invocationHandler -> {
				try {
					return constructor.newInstance(invocationHandler);
				}
				catch (ReflectiveOperationException
							reflectiveOperationException) {

					throw new InternalError(reflectiveOperationException);
				}
			};
		}
		catch (NoSuchMethodException noSuchMethodException) {
			throw new InternalError(noSuchMethodException);
		}
	}

	private static final Map<String, Function<Procedura, Object>>
		_attributeGetterFunctions;
	private static final Map<String, BiConsumer<Procedura, Object>>
		_attributeSetterBiConsumers;

	static {
		Map<String, Function<Procedura, Object>> attributeGetterFunctions =
			new LinkedHashMap<String, Function<Procedura, Object>>();
		Map<String, BiConsumer<Procedura, ?>> attributeSetterBiConsumers =
			new LinkedHashMap<String, BiConsumer<Procedura, ?>>();

		attributeGetterFunctions.put("uuid", Procedura::getUuid);
		attributeSetterBiConsumers.put(
			"uuid", (BiConsumer<Procedura, String>)Procedura::setUuid);
		attributeGetterFunctions.put("proceduraId", Procedura::getProceduraId);
		attributeSetterBiConsumers.put(
			"proceduraId",
			(BiConsumer<Procedura, Long>)Procedura::setProceduraId);
		attributeGetterFunctions.put("groupId", Procedura::getGroupId);
		attributeSetterBiConsumers.put(
			"groupId", (BiConsumer<Procedura, Long>)Procedura::setGroupId);
		attributeGetterFunctions.put("companyId", Procedura::getCompanyId);
		attributeSetterBiConsumers.put(
			"companyId", (BiConsumer<Procedura, Long>)Procedura::setCompanyId);
		attributeGetterFunctions.put("userId", Procedura::getUserId);
		attributeSetterBiConsumers.put(
			"userId", (BiConsumer<Procedura, Long>)Procedura::setUserId);
		attributeGetterFunctions.put("userName", Procedura::getUserName);
		attributeSetterBiConsumers.put(
			"userName", (BiConsumer<Procedura, String>)Procedura::setUserName);
		attributeGetterFunctions.put("createDate", Procedura::getCreateDate);
		attributeSetterBiConsumers.put(
			"createDate",
			(BiConsumer<Procedura, Date>)Procedura::setCreateDate);
		attributeGetterFunctions.put(
			"modifiedDate", Procedura::getModifiedDate);
		attributeSetterBiConsumers.put(
			"modifiedDate",
			(BiConsumer<Procedura, Date>)Procedura::setModifiedDate);
		attributeGetterFunctions.put("nome", Procedura::getNome);
		attributeSetterBiConsumers.put(
			"nome", (BiConsumer<Procedura, String>)Procedura::setNome);
		attributeGetterFunctions.put(
			"pecDestinazione", Procedura::getPecDestinazione);
		attributeSetterBiConsumers.put(
			"pecDestinazione",
			(BiConsumer<Procedura, String>)Procedura::setPecDestinazione);
		attributeGetterFunctions.put("step1Attivo", Procedura::getStep1Attivo);
		attributeSetterBiConsumers.put(
			"step1Attivo",
			(BiConsumer<Procedura, Boolean>)Procedura::setStep1Attivo);
		attributeGetterFunctions.put(
			"step1TipoComponentiNucleoFamiliare",
			Procedura::getStep1TipoComponentiNucleoFamiliare);
		attributeSetterBiConsumers.put(
			"step1TipoComponentiNucleoFamiliare",
			(BiConsumer<Procedura, String>)
				Procedura::setStep1TipoComponentiNucleoFamiliare);
		attributeGetterFunctions.put(
			"step2TipoServizio", Procedura::getStep2TipoServizio);
		attributeSetterBiConsumers.put(
			"step2TipoServizio",
			(BiConsumer<Procedura, String>)Procedura::setStep2TipoServizio);
		attributeGetterFunctions.put(
			"step2TipiIntegrazioneBackoffice",
			Procedura::getStep2TipiIntegrazioneBackoffice);
		attributeSetterBiConsumers.put(
			"step2TipiIntegrazioneBackoffice",
			(BiConsumer<Procedura, String>)
				Procedura::setStep2TipiIntegrazioneBackoffice);
		attributeGetterFunctions.put(
			"abilitaCacheIntegrazioneBackoffice",
			Procedura::getAbilitaCacheIntegrazioneBackoffice);
		attributeSetterBiConsumers.put(
			"abilitaCacheIntegrazioneBackoffice",
			(BiConsumer<Procedura, Boolean>)
				Procedura::setAbilitaCacheIntegrazioneBackoffice);
		attributeGetterFunctions.put(
			"tipoGenerazionePDF", Procedura::getTipoGenerazionePDF);
		attributeSetterBiConsumers.put(
			"tipoGenerazionePDF",
			(BiConsumer<Procedura, String>)Procedura::setTipoGenerazionePDF);
		attributeGetterFunctions.put("attiva", Procedura::getAttiva);
		attributeSetterBiConsumers.put(
			"attiva", (BiConsumer<Procedura, Boolean>)Procedura::setAttiva);
		attributeGetterFunctions.put("servizioId", Procedura::getServizioId);
		attributeSetterBiConsumers.put(
			"servizioId",
			(BiConsumer<Procedura, Long>)Procedura::setServizioId);
		attributeGetterFunctions.put("processoId", Procedura::getProcessoId);
		attributeSetterBiConsumers.put(
			"processoId",
			(BiConsumer<Procedura, Long>)Procedura::setProcessoId);

		_attributeGetterFunctions = Collections.unmodifiableMap(
			attributeGetterFunctions);
		_attributeSetterBiConsumers = Collections.unmodifiableMap(
			(Map)attributeSetterBiConsumers);
	}

	@Override
	public String getUuid() {
		if (_uuid == null) {
			return "";
		}
		else {
			return _uuid;
		}
	}

	@Override
	public void setUuid(String uuid) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_uuid = uuid;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public String getOriginalUuid() {
		return getColumnOriginalValue("uuid_");
	}

	@Override
	public long getProceduraId() {
		return _proceduraId;
	}

	@Override
	public void setProceduraId(long proceduraId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_proceduraId = proceduraId;
	}

	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_groupId = groupId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalGroupId() {
		return GetterUtil.getLong(this.<Long>getColumnOriginalValue("groupId"));
	}

	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_companyId = companyId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalCompanyId() {
		return GetterUtil.getLong(
			this.<Long>getColumnOriginalValue("companyId"));
	}

	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_userId = userId;
	}

	@Override
	public String getUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getUserId());

			return user.getUuid();
		}
		catch (PortalException portalException) {
			return "";
		}
	}

	@Override
	public void setUserUuid(String userUuid) {
	}

	@Override
	public String getUserName() {
		if (_userName == null) {
			return "";
		}
		else {
			return _userName;
		}
	}

	@Override
	public void setUserName(String userName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_userName = userName;
	}

	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_createDate = createDate;
	}

	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public boolean hasSetModifiedDate() {
		return _setModifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_setModifiedDate = true;

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_modifiedDate = modifiedDate;
	}

	@Override
	public String getNome() {
		if (_nome == null) {
			return "";
		}
		else {
			return _nome;
		}
	}

	@Override
	public void setNome(String nome) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_nome = nome;
	}

	@Override
	public String getPecDestinazione() {
		if (_pecDestinazione == null) {
			return "";
		}
		else {
			return _pecDestinazione;
		}
	}

	@Override
	public void setPecDestinazione(String pecDestinazione) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_pecDestinazione = pecDestinazione;
	}

	@Override
	public boolean getStep1Attivo() {
		return _step1Attivo;
	}

	@Override
	public boolean isStep1Attivo() {
		return _step1Attivo;
	}

	@Override
	public void setStep1Attivo(boolean step1Attivo) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_step1Attivo = step1Attivo;
	}

	@Override
	public String getStep1TipoComponentiNucleoFamiliare() {
		if (_step1TipoComponentiNucleoFamiliare == null) {
			return "";
		}
		else {
			return _step1TipoComponentiNucleoFamiliare;
		}
	}

	@Override
	public void setStep1TipoComponentiNucleoFamiliare(
		String step1TipoComponentiNucleoFamiliare) {

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_step1TipoComponentiNucleoFamiliare =
			step1TipoComponentiNucleoFamiliare;
	}

	@Override
	public String getStep2TipoServizio() {
		if (_step2TipoServizio == null) {
			return "";
		}
		else {
			return _step2TipoServizio;
		}
	}

	@Override
	public void setStep2TipoServizio(String step2TipoServizio) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_step2TipoServizio = step2TipoServizio;
	}

	@Override
	public String getStep2TipiIntegrazioneBackoffice() {
		if (_step2TipiIntegrazioneBackoffice == null) {
			return "";
		}
		else {
			return _step2TipiIntegrazioneBackoffice;
		}
	}

	@Override
	public void setStep2TipiIntegrazioneBackoffice(
		String step2TipiIntegrazioneBackoffice) {

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_step2TipiIntegrazioneBackoffice = step2TipiIntegrazioneBackoffice;
	}

	@Override
	public boolean getAbilitaCacheIntegrazioneBackoffice() {
		return _abilitaCacheIntegrazioneBackoffice;
	}

	@Override
	public boolean isAbilitaCacheIntegrazioneBackoffice() {
		return _abilitaCacheIntegrazioneBackoffice;
	}

	@Override
	public void setAbilitaCacheIntegrazioneBackoffice(
		boolean abilitaCacheIntegrazioneBackoffice) {

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_abilitaCacheIntegrazioneBackoffice =
			abilitaCacheIntegrazioneBackoffice;
	}

	@Override
	public String getTipoGenerazionePDF() {
		if (_tipoGenerazionePDF == null) {
			return "";
		}
		else {
			return _tipoGenerazionePDF;
		}
	}

	@Override
	public void setTipoGenerazionePDF(String tipoGenerazionePDF) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_tipoGenerazionePDF = tipoGenerazionePDF;
	}

	@Override
	public boolean getAttiva() {
		return _attiva;
	}

	@Override
	public boolean isAttiva() {
		return _attiva;
	}

	@Override
	public void setAttiva(boolean attiva) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_attiva = attiva;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public boolean getOriginalAttiva() {
		return GetterUtil.getBoolean(
			this.<Boolean>getColumnOriginalValue("attiva"));
	}

	@Override
	public long getServizioId() {
		return _servizioId;
	}

	@Override
	public void setServizioId(long servizioId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_servizioId = servizioId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalServizioId() {
		return GetterUtil.getLong(
			this.<Long>getColumnOriginalValue("servizioId"));
	}

	@Override
	public long getProcessoId() {
		return _processoId;
	}

	@Override
	public void setProcessoId(long processoId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_processoId = processoId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalProcessoId() {
		return GetterUtil.getLong(
			this.<Long>getColumnOriginalValue("processoId"));
	}

	@Override
	public StagedModelType getStagedModelType() {
		return new StagedModelType(
			PortalUtil.getClassNameId(Procedura.class.getName()));
	}

	public long getColumnBitmask() {
		if (_columnBitmask > 0) {
			return _columnBitmask;
		}

		if ((_columnOriginalValues == null) ||
			(_columnOriginalValues == Collections.EMPTY_MAP)) {

			return 0;
		}

		for (Map.Entry<String, Object> entry :
				_columnOriginalValues.entrySet()) {

			if (!Objects.equals(
					entry.getValue(), getColumnValue(entry.getKey()))) {

				_columnBitmask |= _columnBitmasks.get(entry.getKey());
			}
		}

		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			getCompanyId(), Procedura.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public Procedura toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, Procedura>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		ProceduraImpl proceduraImpl = new ProceduraImpl();

		proceduraImpl.setUuid(getUuid());
		proceduraImpl.setProceduraId(getProceduraId());
		proceduraImpl.setGroupId(getGroupId());
		proceduraImpl.setCompanyId(getCompanyId());
		proceduraImpl.setUserId(getUserId());
		proceduraImpl.setUserName(getUserName());
		proceduraImpl.setCreateDate(getCreateDate());
		proceduraImpl.setModifiedDate(getModifiedDate());
		proceduraImpl.setNome(getNome());
		proceduraImpl.setPecDestinazione(getPecDestinazione());
		proceduraImpl.setStep1Attivo(isStep1Attivo());
		proceduraImpl.setStep1TipoComponentiNucleoFamiliare(
			getStep1TipoComponentiNucleoFamiliare());
		proceduraImpl.setStep2TipoServizio(getStep2TipoServizio());
		proceduraImpl.setStep2TipiIntegrazioneBackoffice(
			getStep2TipiIntegrazioneBackoffice());
		proceduraImpl.setAbilitaCacheIntegrazioneBackoffice(
			isAbilitaCacheIntegrazioneBackoffice());
		proceduraImpl.setTipoGenerazionePDF(getTipoGenerazionePDF());
		proceduraImpl.setAttiva(isAttiva());
		proceduraImpl.setServizioId(getServizioId());
		proceduraImpl.setProcessoId(getProcessoId());

		proceduraImpl.resetOriginalValues();

		return proceduraImpl;
	}

	@Override
	public Procedura cloneWithOriginalValues() {
		ProceduraImpl proceduraImpl = new ProceduraImpl();

		proceduraImpl.setUuid(this.<String>getColumnOriginalValue("uuid_"));
		proceduraImpl.setProceduraId(
			this.<Long>getColumnOriginalValue("proceduraId"));
		proceduraImpl.setGroupId(this.<Long>getColumnOriginalValue("groupId"));
		proceduraImpl.setCompanyId(
			this.<Long>getColumnOriginalValue("companyId"));
		proceduraImpl.setUserId(this.<Long>getColumnOriginalValue("userId"));
		proceduraImpl.setUserName(
			this.<String>getColumnOriginalValue("userName"));
		proceduraImpl.setCreateDate(
			this.<Date>getColumnOriginalValue("createDate"));
		proceduraImpl.setModifiedDate(
			this.<Date>getColumnOriginalValue("modifiedDate"));
		proceduraImpl.setNome(this.<String>getColumnOriginalValue("nome"));
		proceduraImpl.setPecDestinazione(
			this.<String>getColumnOriginalValue("pecDestinazione"));
		proceduraImpl.setStep1Attivo(
			this.<Boolean>getColumnOriginalValue("step1Attivo"));
		proceduraImpl.setStep1TipoComponentiNucleoFamiliare(
			this.<String>getColumnOriginalValue(
				"step1TipoComponentiNucleoFamiliare"));
		proceduraImpl.setStep2TipoServizio(
			this.<String>getColumnOriginalValue("step2TipoServizio"));
		proceduraImpl.setStep2TipiIntegrazioneBackoffice(
			this.<String>getColumnOriginalValue(
				"step2TipiIntegrazioneBackoffice"));
		proceduraImpl.setAbilitaCacheIntegrazioneBackoffice(
			this.<Boolean>getColumnOriginalValue(
				"abilitaCacheIntegrazioneBackoffice"));
		proceduraImpl.setTipoGenerazionePDF(
			this.<String>getColumnOriginalValue("tipoGenerazionePDF"));
		proceduraImpl.setAttiva(this.<Boolean>getColumnOriginalValue("attiva"));
		proceduraImpl.setServizioId(
			this.<Long>getColumnOriginalValue("servizioId"));
		proceduraImpl.setProcessoId(
			this.<Long>getColumnOriginalValue("processoId"));

		return proceduraImpl;
	}

	@Override
	public int compareTo(Procedura procedura) {
		long primaryKey = procedura.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object object) {
		if (this == object) {
			return true;
		}

		if (!(object instanceof Procedura)) {
			return false;
		}

		Procedura procedura = (Procedura)object;

		long primaryKey = procedura.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isEntityCacheEnabled() {
		return true;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isFinderCacheEnabled() {
		return true;
	}

	@Override
	public void resetOriginalValues() {
		_columnOriginalValues = Collections.emptyMap();

		_setModifiedDate = false;

		_columnBitmask = 0;
	}

	@Override
	public CacheModel<Procedura> toCacheModel() {
		ProceduraCacheModel proceduraCacheModel = new ProceduraCacheModel();

		proceduraCacheModel.uuid = getUuid();

		String uuid = proceduraCacheModel.uuid;

		if ((uuid != null) && (uuid.length() == 0)) {
			proceduraCacheModel.uuid = null;
		}

		proceduraCacheModel.proceduraId = getProceduraId();

		proceduraCacheModel.groupId = getGroupId();

		proceduraCacheModel.companyId = getCompanyId();

		proceduraCacheModel.userId = getUserId();

		proceduraCacheModel.userName = getUserName();

		String userName = proceduraCacheModel.userName;

		if ((userName != null) && (userName.length() == 0)) {
			proceduraCacheModel.userName = null;
		}

		Date createDate = getCreateDate();

		if (createDate != null) {
			proceduraCacheModel.createDate = createDate.getTime();
		}
		else {
			proceduraCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			proceduraCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			proceduraCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		proceduraCacheModel.nome = getNome();

		String nome = proceduraCacheModel.nome;

		if ((nome != null) && (nome.length() == 0)) {
			proceduraCacheModel.nome = null;
		}

		proceduraCacheModel.pecDestinazione = getPecDestinazione();

		String pecDestinazione = proceduraCacheModel.pecDestinazione;

		if ((pecDestinazione != null) && (pecDestinazione.length() == 0)) {
			proceduraCacheModel.pecDestinazione = null;
		}

		proceduraCacheModel.step1Attivo = isStep1Attivo();

		proceduraCacheModel.step1TipoComponentiNucleoFamiliare =
			getStep1TipoComponentiNucleoFamiliare();

		String step1TipoComponentiNucleoFamiliare =
			proceduraCacheModel.step1TipoComponentiNucleoFamiliare;

		if ((step1TipoComponentiNucleoFamiliare != null) &&
			(step1TipoComponentiNucleoFamiliare.length() == 0)) {

			proceduraCacheModel.step1TipoComponentiNucleoFamiliare = null;
		}

		proceduraCacheModel.step2TipoServizio = getStep2TipoServizio();

		String step2TipoServizio = proceduraCacheModel.step2TipoServizio;

		if ((step2TipoServizio != null) && (step2TipoServizio.length() == 0)) {
			proceduraCacheModel.step2TipoServizio = null;
		}

		proceduraCacheModel.step2TipiIntegrazioneBackoffice =
			getStep2TipiIntegrazioneBackoffice();

		String step2TipiIntegrazioneBackoffice =
			proceduraCacheModel.step2TipiIntegrazioneBackoffice;

		if ((step2TipiIntegrazioneBackoffice != null) &&
			(step2TipiIntegrazioneBackoffice.length() == 0)) {

			proceduraCacheModel.step2TipiIntegrazioneBackoffice = null;
		}

		proceduraCacheModel.abilitaCacheIntegrazioneBackoffice =
			isAbilitaCacheIntegrazioneBackoffice();

		proceduraCacheModel.tipoGenerazionePDF = getTipoGenerazionePDF();

		String tipoGenerazionePDF = proceduraCacheModel.tipoGenerazionePDF;

		if ((tipoGenerazionePDF != null) &&
			(tipoGenerazionePDF.length() == 0)) {

			proceduraCacheModel.tipoGenerazionePDF = null;
		}

		proceduraCacheModel.attiva = isAttiva();

		proceduraCacheModel.servizioId = getServizioId();

		proceduraCacheModel.processoId = getProcessoId();

		return proceduraCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<Procedura, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 2);

		sb.append("{");

		for (Map.Entry<String, Function<Procedura, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<Procedura, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("\"");
			sb.append(attributeName);
			sb.append("\": ");

			Object value = attributeGetterFunction.apply((Procedura)this);

			if (value == null) {
				sb.append("null");
			}
			else if (value instanceof Blob || value instanceof Date ||
					 value instanceof Map || value instanceof String) {

				sb.append(
					"\"" + StringUtil.replace(value.toString(), "\"", "'") +
						"\"");
			}
			else {
				sb.append(value);
			}

			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		Map<String, Function<Procedura, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 4);

		sb.append("<model><model-name>");
		sb.append(getModelClassName());
		sb.append("</model-name>");

		for (Map.Entry<String, Function<Procedura, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<Procedura, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("<column><column-name>");
			sb.append(attributeName);
			sb.append("</column-name><column-value><![CDATA[");
			sb.append(attributeGetterFunction.apply((Procedura)this));
			sb.append("]]></column-value></column>");
		}

		sb.append("</model>");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function<InvocationHandler, Procedura>
			_escapedModelProxyProviderFunction = _getProxyProviderFunction();

	}

	private String _uuid;
	private long _proceduraId;
	private long _groupId;
	private long _companyId;
	private long _userId;
	private String _userName;
	private Date _createDate;
	private Date _modifiedDate;
	private boolean _setModifiedDate;
	private String _nome;
	private String _pecDestinazione;
	private boolean _step1Attivo;
	private String _step1TipoComponentiNucleoFamiliare;
	private String _step2TipoServizio;
	private String _step2TipiIntegrazioneBackoffice;
	private boolean _abilitaCacheIntegrazioneBackoffice;
	private String _tipoGenerazionePDF;
	private boolean _attiva;
	private long _servizioId;
	private long _processoId;

	public <T> T getColumnValue(String columnName) {
		columnName = _attributeNames.getOrDefault(columnName, columnName);

		Function<Procedura, Object> function = _attributeGetterFunctions.get(
			columnName);

		if (function == null) {
			throw new IllegalArgumentException(
				"No attribute getter function found for " + columnName);
		}

		return (T)function.apply((Procedura)this);
	}

	public <T> T getColumnOriginalValue(String columnName) {
		if (_columnOriginalValues == null) {
			return null;
		}

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		return (T)_columnOriginalValues.get(columnName);
	}

	private void _setColumnOriginalValues() {
		_columnOriginalValues = new HashMap<String, Object>();

		_columnOriginalValues.put("uuid_", _uuid);
		_columnOriginalValues.put("proceduraId", _proceduraId);
		_columnOriginalValues.put("groupId", _groupId);
		_columnOriginalValues.put("companyId", _companyId);
		_columnOriginalValues.put("userId", _userId);
		_columnOriginalValues.put("userName", _userName);
		_columnOriginalValues.put("createDate", _createDate);
		_columnOriginalValues.put("modifiedDate", _modifiedDate);
		_columnOriginalValues.put("nome", _nome);
		_columnOriginalValues.put("pecDestinazione", _pecDestinazione);
		_columnOriginalValues.put("step1Attivo", _step1Attivo);
		_columnOriginalValues.put(
			"step1TipoComponentiNucleoFamiliare",
			_step1TipoComponentiNucleoFamiliare);
		_columnOriginalValues.put("step2TipoServizio", _step2TipoServizio);
		_columnOriginalValues.put(
			"step2TipiIntegrazioneBackoffice",
			_step2TipiIntegrazioneBackoffice);
		_columnOriginalValues.put(
			"abilitaCacheIntegrazioneBackoffice",
			_abilitaCacheIntegrazioneBackoffice);
		_columnOriginalValues.put("tipoGenerazionePDF", _tipoGenerazionePDF);
		_columnOriginalValues.put("attiva", _attiva);
		_columnOriginalValues.put("servizioId", _servizioId);
		_columnOriginalValues.put("processoId", _processoId);
	}

	private static final Map<String, String> _attributeNames;

	static {
		Map<String, String> attributeNames = new HashMap<>();

		attributeNames.put("uuid_", "uuid");

		_attributeNames = Collections.unmodifiableMap(attributeNames);
	}

	private transient Map<String, Object> _columnOriginalValues;

	public static long getColumnBitmask(String columnName) {
		return _columnBitmasks.get(columnName);
	}

	private static final Map<String, Long> _columnBitmasks;

	static {
		Map<String, Long> columnBitmasks = new HashMap<>();

		columnBitmasks.put("uuid_", 1L);

		columnBitmasks.put("proceduraId", 2L);

		columnBitmasks.put("groupId", 4L);

		columnBitmasks.put("companyId", 8L);

		columnBitmasks.put("userId", 16L);

		columnBitmasks.put("userName", 32L);

		columnBitmasks.put("createDate", 64L);

		columnBitmasks.put("modifiedDate", 128L);

		columnBitmasks.put("nome", 256L);

		columnBitmasks.put("pecDestinazione", 512L);

		columnBitmasks.put("step1Attivo", 1024L);

		columnBitmasks.put("step1TipoComponentiNucleoFamiliare", 2048L);

		columnBitmasks.put("step2TipoServizio", 4096L);

		columnBitmasks.put("step2TipiIntegrazioneBackoffice", 8192L);

		columnBitmasks.put("abilitaCacheIntegrazioneBackoffice", 16384L);

		columnBitmasks.put("tipoGenerazionePDF", 32768L);

		columnBitmasks.put("attiva", 65536L);

		columnBitmasks.put("servizioId", 131072L);

		columnBitmasks.put("processoId", 262144L);

		_columnBitmasks = Collections.unmodifiableMap(columnBitmasks);
	}

	private long _columnBitmask;
	private Procedura _escapedModel;

}