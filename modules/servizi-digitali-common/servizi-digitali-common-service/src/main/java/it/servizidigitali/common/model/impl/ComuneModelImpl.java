/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package it.servizidigitali.common.model.impl;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringUtil;

import it.servizidigitali.common.model.Comune;
import it.servizidigitali.common.model.ComuneModel;

import java.io.Serializable;

import java.lang.reflect.Constructor;
import java.lang.reflect.InvocationHandler;

import java.sql.Blob;
import java.sql.Types;

import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.Objects;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the Comune service. Represents a row in the &quot;comune&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>ComuneModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link ComuneImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see ComuneImpl
 * @generated
 */
public class ComuneModelImpl
	extends BaseModelImpl<Comune> implements ComuneModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a comune model instance should use the <code>Comune</code> interface instead.
	 */
	public static final String TABLE_NAME = "comune";

	public static final Object[][] TABLE_COLUMNS = {
		{"comuneId", Types.BIGINT}, {"codiceIstatAN", Types.VARCHAR},
		{"codiceIstat1", Types.VARCHAR}, {"codiceIstat103", Types.VARCHAR},
		{"codicestat107", Types.VARCHAR}, {"denominazione", Types.VARCHAR},
		{"capoluogo", Types.BOOLEAN}, {"zonaAltimetrica", Types.VARCHAR},
		{"altitudine", Types.VARCHAR}, {"comuneLitoraneo", Types.BOOLEAN},
		{"comuneMontano", Types.VARCHAR},
		{"codiceSistemaLocaleLavoro", Types.VARCHAR},
		{"denominazioneSistemaLocaleLavoro", Types.VARCHAR},
		{"superficie", Types.VARCHAR}, {"popolazioneLegale", Types.VARCHAR},
		{"popolazioneResidente1", Types.VARCHAR},
		{"popolazioneResidente2", Types.VARCHAR},
		{"popolazioneResidente3", Types.VARCHAR},
		{"codiceComune", Types.INTEGER}, {"codiceCatastale", Types.VARCHAR},
		{"idRegione", Types.BIGINT}, {"idProvincia", Types.BIGINT}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("comuneId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("codiceIstatAN", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("codiceIstat1", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("codiceIstat103", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("codicestat107", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("denominazione", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("capoluogo", Types.BOOLEAN);
		TABLE_COLUMNS_MAP.put("zonaAltimetrica", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("altitudine", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("comuneLitoraneo", Types.BOOLEAN);
		TABLE_COLUMNS_MAP.put("comuneMontano", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("codiceSistemaLocaleLavoro", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put(
			"denominazioneSistemaLocaleLavoro", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("superficie", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("popolazioneLegale", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("popolazioneResidente1", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("popolazioneResidente2", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("popolazioneResidente3", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("codiceComune", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("codiceCatastale", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("idRegione", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("idProvincia", Types.BIGINT);
	}

	public static final String TABLE_SQL_CREATE =
		"create table comune (comuneId LONG not null primary key,codiceIstatAN VARCHAR(75) null,codiceIstat1 VARCHAR(75) null,codiceIstat103 VARCHAR(75) null,codicestat107 VARCHAR(75) null,denominazione VARCHAR(75) null,capoluogo BOOLEAN,zonaAltimetrica VARCHAR(75) null,altitudine VARCHAR(75) null,comuneLitoraneo BOOLEAN,comuneMontano VARCHAR(75) null,codiceSistemaLocaleLavoro VARCHAR(75) null,denominazioneSistemaLocaleLavoro VARCHAR(75) null,superficie VARCHAR(75) null,popolazioneLegale VARCHAR(75) null,popolazioneResidente1 VARCHAR(75) null,popolazioneResidente2 VARCHAR(75) null,popolazioneResidente3 VARCHAR(75) null,codiceComune INTEGER,codiceCatastale VARCHAR(75) null,idRegione LONG,idProvincia LONG)";

	public static final String TABLE_SQL_DROP = "drop table comune";

	public static final String ORDER_BY_JPQL =
		" ORDER BY comune.denominazione ASC";

	public static final String ORDER_BY_SQL =
		" ORDER BY comune.denominazione ASC";

	public static final String DATA_SOURCE = "servizidigitaliDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long CODICECATASTALE_COLUMN_BITMASK = 1L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long CODICECOMUNE_COLUMN_BITMASK = 2L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long CODICEISTATAN_COLUMN_BITMASK = 4L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long IDPROVINCIA_COLUMN_BITMASK = 8L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long IDREGIONE_COLUMN_BITMASK = 16L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *		#getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long DENOMINAZIONE_COLUMN_BITMASK = 32L;

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
	}

	public ComuneModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _comuneId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setComuneId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _comuneId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return Comune.class;
	}

	@Override
	public String getModelClassName() {
		return Comune.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<Comune, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		for (Map.Entry<String, Function<Comune, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<Comune, Object> attributeGetterFunction = entry.getValue();

			attributes.put(
				attributeName, attributeGetterFunction.apply((Comune)this));
		}

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<Comune, Object>> attributeSetterBiConsumers =
			getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<Comune, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(Comune)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<Comune, Object>> getAttributeGetterFunctions() {
		return _attributeGetterFunctions;
	}

	public Map<String, BiConsumer<Comune, Object>>
		getAttributeSetterBiConsumers() {

		return _attributeSetterBiConsumers;
	}

	private static Function<InvocationHandler, Comune>
		_getProxyProviderFunction() {

		Class<?> proxyClass = ProxyUtil.getProxyClass(
			Comune.class.getClassLoader(), Comune.class, ModelWrapper.class);

		try {
			Constructor<Comune> constructor =
				(Constructor<Comune>)proxyClass.getConstructor(
					InvocationHandler.class);

			return invocationHandler -> {
				try {
					return constructor.newInstance(invocationHandler);
				}
				catch (ReflectiveOperationException
							reflectiveOperationException) {

					throw new InternalError(reflectiveOperationException);
				}
			};
		}
		catch (NoSuchMethodException noSuchMethodException) {
			throw new InternalError(noSuchMethodException);
		}
	}

	private static final Map<String, Function<Comune, Object>>
		_attributeGetterFunctions;
	private static final Map<String, BiConsumer<Comune, Object>>
		_attributeSetterBiConsumers;

	static {
		Map<String, Function<Comune, Object>> attributeGetterFunctions =
			new LinkedHashMap<String, Function<Comune, Object>>();
		Map<String, BiConsumer<Comune, ?>> attributeSetterBiConsumers =
			new LinkedHashMap<String, BiConsumer<Comune, ?>>();

		attributeGetterFunctions.put("comuneId", Comune::getComuneId);
		attributeSetterBiConsumers.put(
			"comuneId", (BiConsumer<Comune, Long>)Comune::setComuneId);
		attributeGetterFunctions.put("codiceIstatAN", Comune::getCodiceIstatAN);
		attributeSetterBiConsumers.put(
			"codiceIstatAN",
			(BiConsumer<Comune, String>)Comune::setCodiceIstatAN);
		attributeGetterFunctions.put("codiceIstat1", Comune::getCodiceIstat1);
		attributeSetterBiConsumers.put(
			"codiceIstat1",
			(BiConsumer<Comune, String>)Comune::setCodiceIstat1);
		attributeGetterFunctions.put(
			"codiceIstat103", Comune::getCodiceIstat103);
		attributeSetterBiConsumers.put(
			"codiceIstat103",
			(BiConsumer<Comune, String>)Comune::setCodiceIstat103);
		attributeGetterFunctions.put("codicestat107", Comune::getCodicestat107);
		attributeSetterBiConsumers.put(
			"codicestat107",
			(BiConsumer<Comune, String>)Comune::setCodicestat107);
		attributeGetterFunctions.put("denominazione", Comune::getDenominazione);
		attributeSetterBiConsumers.put(
			"denominazione",
			(BiConsumer<Comune, String>)Comune::setDenominazione);
		attributeGetterFunctions.put("capoluogo", Comune::getCapoluogo);
		attributeSetterBiConsumers.put(
			"capoluogo", (BiConsumer<Comune, Boolean>)Comune::setCapoluogo);
		attributeGetterFunctions.put(
			"zonaAltimetrica", Comune::getZonaAltimetrica);
		attributeSetterBiConsumers.put(
			"zonaAltimetrica",
			(BiConsumer<Comune, String>)Comune::setZonaAltimetrica);
		attributeGetterFunctions.put("altitudine", Comune::getAltitudine);
		attributeSetterBiConsumers.put(
			"altitudine", (BiConsumer<Comune, String>)Comune::setAltitudine);
		attributeGetterFunctions.put(
			"comuneLitoraneo", Comune::getComuneLitoraneo);
		attributeSetterBiConsumers.put(
			"comuneLitoraneo",
			(BiConsumer<Comune, Boolean>)Comune::setComuneLitoraneo);
		attributeGetterFunctions.put("comuneMontano", Comune::getComuneMontano);
		attributeSetterBiConsumers.put(
			"comuneMontano",
			(BiConsumer<Comune, String>)Comune::setComuneMontano);
		attributeGetterFunctions.put(
			"codiceSistemaLocaleLavoro", Comune::getCodiceSistemaLocaleLavoro);
		attributeSetterBiConsumers.put(
			"codiceSistemaLocaleLavoro",
			(BiConsumer<Comune, String>)Comune::setCodiceSistemaLocaleLavoro);
		attributeGetterFunctions.put(
			"denominazioneSistemaLocaleLavoro",
			Comune::getDenominazioneSistemaLocaleLavoro);
		attributeSetterBiConsumers.put(
			"denominazioneSistemaLocaleLavoro",
			(BiConsumer<Comune, String>)
				Comune::setDenominazioneSistemaLocaleLavoro);
		attributeGetterFunctions.put("superficie", Comune::getSuperficie);
		attributeSetterBiConsumers.put(
			"superficie", (BiConsumer<Comune, String>)Comune::setSuperficie);
		attributeGetterFunctions.put(
			"popolazioneLegale", Comune::getPopolazioneLegale);
		attributeSetterBiConsumers.put(
			"popolazioneLegale",
			(BiConsumer<Comune, String>)Comune::setPopolazioneLegale);
		attributeGetterFunctions.put(
			"popolazioneResidente1", Comune::getPopolazioneResidente1);
		attributeSetterBiConsumers.put(
			"popolazioneResidente1",
			(BiConsumer<Comune, String>)Comune::setPopolazioneResidente1);
		attributeGetterFunctions.put(
			"popolazioneResidente2", Comune::getPopolazioneResidente2);
		attributeSetterBiConsumers.put(
			"popolazioneResidente2",
			(BiConsumer<Comune, String>)Comune::setPopolazioneResidente2);
		attributeGetterFunctions.put(
			"popolazioneResidente3", Comune::getPopolazioneResidente3);
		attributeSetterBiConsumers.put(
			"popolazioneResidente3",
			(BiConsumer<Comune, String>)Comune::setPopolazioneResidente3);
		attributeGetterFunctions.put("codiceComune", Comune::getCodiceComune);
		attributeSetterBiConsumers.put(
			"codiceComune",
			(BiConsumer<Comune, Integer>)Comune::setCodiceComune);
		attributeGetterFunctions.put(
			"codiceCatastale", Comune::getCodiceCatastale);
		attributeSetterBiConsumers.put(
			"codiceCatastale",
			(BiConsumer<Comune, String>)Comune::setCodiceCatastale);
		attributeGetterFunctions.put("idRegione", Comune::getIdRegione);
		attributeSetterBiConsumers.put(
			"idRegione", (BiConsumer<Comune, Long>)Comune::setIdRegione);
		attributeGetterFunctions.put("idProvincia", Comune::getIdProvincia);
		attributeSetterBiConsumers.put(
			"idProvincia", (BiConsumer<Comune, Long>)Comune::setIdProvincia);

		_attributeGetterFunctions = Collections.unmodifiableMap(
			attributeGetterFunctions);
		_attributeSetterBiConsumers = Collections.unmodifiableMap(
			(Map)attributeSetterBiConsumers);
	}

	@Override
	public long getComuneId() {
		return _comuneId;
	}

	@Override
	public void setComuneId(long comuneId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_comuneId = comuneId;
	}

	@Override
	public String getCodiceIstatAN() {
		if (_codiceIstatAN == null) {
			return "";
		}
		else {
			return _codiceIstatAN;
		}
	}

	@Override
	public void setCodiceIstatAN(String codiceIstatAN) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_codiceIstatAN = codiceIstatAN;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public String getOriginalCodiceIstatAN() {
		return getColumnOriginalValue("codiceIstatAN");
	}

	@Override
	public String getCodiceIstat1() {
		if (_codiceIstat1 == null) {
			return "";
		}
		else {
			return _codiceIstat1;
		}
	}

	@Override
	public void setCodiceIstat1(String codiceIstat1) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_codiceIstat1 = codiceIstat1;
	}

	@Override
	public String getCodiceIstat103() {
		if (_codiceIstat103 == null) {
			return "";
		}
		else {
			return _codiceIstat103;
		}
	}

	@Override
	public void setCodiceIstat103(String codiceIstat103) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_codiceIstat103 = codiceIstat103;
	}

	@Override
	public String getCodicestat107() {
		if (_codicestat107 == null) {
			return "";
		}
		else {
			return _codicestat107;
		}
	}

	@Override
	public void setCodicestat107(String codicestat107) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_codicestat107 = codicestat107;
	}

	@Override
	public String getDenominazione() {
		if (_denominazione == null) {
			return "";
		}
		else {
			return _denominazione;
		}
	}

	@Override
	public void setDenominazione(String denominazione) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_denominazione = denominazione;
	}

	@Override
	public boolean getCapoluogo() {
		return _capoluogo;
	}

	@Override
	public boolean isCapoluogo() {
		return _capoluogo;
	}

	@Override
	public void setCapoluogo(boolean capoluogo) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_capoluogo = capoluogo;
	}

	@Override
	public String getZonaAltimetrica() {
		if (_zonaAltimetrica == null) {
			return "";
		}
		else {
			return _zonaAltimetrica;
		}
	}

	@Override
	public void setZonaAltimetrica(String zonaAltimetrica) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_zonaAltimetrica = zonaAltimetrica;
	}

	@Override
	public String getAltitudine() {
		if (_altitudine == null) {
			return "";
		}
		else {
			return _altitudine;
		}
	}

	@Override
	public void setAltitudine(String altitudine) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_altitudine = altitudine;
	}

	@Override
	public boolean getComuneLitoraneo() {
		return _comuneLitoraneo;
	}

	@Override
	public boolean isComuneLitoraneo() {
		return _comuneLitoraneo;
	}

	@Override
	public void setComuneLitoraneo(boolean comuneLitoraneo) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_comuneLitoraneo = comuneLitoraneo;
	}

	@Override
	public String getComuneMontano() {
		if (_comuneMontano == null) {
			return "";
		}
		else {
			return _comuneMontano;
		}
	}

	@Override
	public void setComuneMontano(String comuneMontano) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_comuneMontano = comuneMontano;
	}

	@Override
	public String getCodiceSistemaLocaleLavoro() {
		if (_codiceSistemaLocaleLavoro == null) {
			return "";
		}
		else {
			return _codiceSistemaLocaleLavoro;
		}
	}

	@Override
	public void setCodiceSistemaLocaleLavoro(String codiceSistemaLocaleLavoro) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_codiceSistemaLocaleLavoro = codiceSistemaLocaleLavoro;
	}

	@Override
	public String getDenominazioneSistemaLocaleLavoro() {
		if (_denominazioneSistemaLocaleLavoro == null) {
			return "";
		}
		else {
			return _denominazioneSistemaLocaleLavoro;
		}
	}

	@Override
	public void setDenominazioneSistemaLocaleLavoro(
		String denominazioneSistemaLocaleLavoro) {

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_denominazioneSistemaLocaleLavoro = denominazioneSistemaLocaleLavoro;
	}

	@Override
	public String getSuperficie() {
		if (_superficie == null) {
			return "";
		}
		else {
			return _superficie;
		}
	}

	@Override
	public void setSuperficie(String superficie) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_superficie = superficie;
	}

	@Override
	public String getPopolazioneLegale() {
		if (_popolazioneLegale == null) {
			return "";
		}
		else {
			return _popolazioneLegale;
		}
	}

	@Override
	public void setPopolazioneLegale(String popolazioneLegale) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_popolazioneLegale = popolazioneLegale;
	}

	@Override
	public String getPopolazioneResidente1() {
		if (_popolazioneResidente1 == null) {
			return "";
		}
		else {
			return _popolazioneResidente1;
		}
	}

	@Override
	public void setPopolazioneResidente1(String popolazioneResidente1) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_popolazioneResidente1 = popolazioneResidente1;
	}

	@Override
	public String getPopolazioneResidente2() {
		if (_popolazioneResidente2 == null) {
			return "";
		}
		else {
			return _popolazioneResidente2;
		}
	}

	@Override
	public void setPopolazioneResidente2(String popolazioneResidente2) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_popolazioneResidente2 = popolazioneResidente2;
	}

	@Override
	public String getPopolazioneResidente3() {
		if (_popolazioneResidente3 == null) {
			return "";
		}
		else {
			return _popolazioneResidente3;
		}
	}

	@Override
	public void setPopolazioneResidente3(String popolazioneResidente3) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_popolazioneResidente3 = popolazioneResidente3;
	}

	@Override
	public int getCodiceComune() {
		return _codiceComune;
	}

	@Override
	public void setCodiceComune(int codiceComune) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_codiceComune = codiceComune;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public int getOriginalCodiceComune() {
		return GetterUtil.getInteger(
			this.<Integer>getColumnOriginalValue("codiceComune"));
	}

	@Override
	public String getCodiceCatastale() {
		if (_codiceCatastale == null) {
			return "";
		}
		else {
			return _codiceCatastale;
		}
	}

	@Override
	public void setCodiceCatastale(String codiceCatastale) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_codiceCatastale = codiceCatastale;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public String getOriginalCodiceCatastale() {
		return getColumnOriginalValue("codiceCatastale");
	}

	@Override
	public long getIdRegione() {
		return _idRegione;
	}

	@Override
	public void setIdRegione(long idRegione) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_idRegione = idRegione;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalIdRegione() {
		return GetterUtil.getLong(
			this.<Long>getColumnOriginalValue("idRegione"));
	}

	@Override
	public long getIdProvincia() {
		return _idProvincia;
	}

	@Override
	public void setIdProvincia(long idProvincia) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_idProvincia = idProvincia;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalIdProvincia() {
		return GetterUtil.getLong(
			this.<Long>getColumnOriginalValue("idProvincia"));
	}

	public long getColumnBitmask() {
		if (_columnBitmask > 0) {
			return _columnBitmask;
		}

		if ((_columnOriginalValues == null) ||
			(_columnOriginalValues == Collections.EMPTY_MAP)) {

			return 0;
		}

		for (Map.Entry<String, Object> entry :
				_columnOriginalValues.entrySet()) {

			if (!Objects.equals(
					entry.getValue(), getColumnValue(entry.getKey()))) {

				_columnBitmask |= _columnBitmasks.get(entry.getKey());
			}
		}

		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			0, Comune.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public Comune toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, Comune>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		ComuneImpl comuneImpl = new ComuneImpl();

		comuneImpl.setComuneId(getComuneId());
		comuneImpl.setCodiceIstatAN(getCodiceIstatAN());
		comuneImpl.setCodiceIstat1(getCodiceIstat1());
		comuneImpl.setCodiceIstat103(getCodiceIstat103());
		comuneImpl.setCodicestat107(getCodicestat107());
		comuneImpl.setDenominazione(getDenominazione());
		comuneImpl.setCapoluogo(isCapoluogo());
		comuneImpl.setZonaAltimetrica(getZonaAltimetrica());
		comuneImpl.setAltitudine(getAltitudine());
		comuneImpl.setComuneLitoraneo(isComuneLitoraneo());
		comuneImpl.setComuneMontano(getComuneMontano());
		comuneImpl.setCodiceSistemaLocaleLavoro(getCodiceSistemaLocaleLavoro());
		comuneImpl.setDenominazioneSistemaLocaleLavoro(
			getDenominazioneSistemaLocaleLavoro());
		comuneImpl.setSuperficie(getSuperficie());
		comuneImpl.setPopolazioneLegale(getPopolazioneLegale());
		comuneImpl.setPopolazioneResidente1(getPopolazioneResidente1());
		comuneImpl.setPopolazioneResidente2(getPopolazioneResidente2());
		comuneImpl.setPopolazioneResidente3(getPopolazioneResidente3());
		comuneImpl.setCodiceComune(getCodiceComune());
		comuneImpl.setCodiceCatastale(getCodiceCatastale());
		comuneImpl.setIdRegione(getIdRegione());
		comuneImpl.setIdProvincia(getIdProvincia());

		comuneImpl.resetOriginalValues();

		return comuneImpl;
	}

	@Override
	public Comune cloneWithOriginalValues() {
		ComuneImpl comuneImpl = new ComuneImpl();

		comuneImpl.setComuneId(this.<Long>getColumnOriginalValue("comuneId"));
		comuneImpl.setCodiceIstatAN(
			this.<String>getColumnOriginalValue("codiceIstatAN"));
		comuneImpl.setCodiceIstat1(
			this.<String>getColumnOriginalValue("codiceIstat1"));
		comuneImpl.setCodiceIstat103(
			this.<String>getColumnOriginalValue("codiceIstat103"));
		comuneImpl.setCodicestat107(
			this.<String>getColumnOriginalValue("codicestat107"));
		comuneImpl.setDenominazione(
			this.<String>getColumnOriginalValue("denominazione"));
		comuneImpl.setCapoluogo(
			this.<Boolean>getColumnOriginalValue("capoluogo"));
		comuneImpl.setZonaAltimetrica(
			this.<String>getColumnOriginalValue("zonaAltimetrica"));
		comuneImpl.setAltitudine(
			this.<String>getColumnOriginalValue("altitudine"));
		comuneImpl.setComuneLitoraneo(
			this.<Boolean>getColumnOriginalValue("comuneLitoraneo"));
		comuneImpl.setComuneMontano(
			this.<String>getColumnOriginalValue("comuneMontano"));
		comuneImpl.setCodiceSistemaLocaleLavoro(
			this.<String>getColumnOriginalValue("codiceSistemaLocaleLavoro"));
		comuneImpl.setDenominazioneSistemaLocaleLavoro(
			this.<String>getColumnOriginalValue(
				"denominazioneSistemaLocaleLavoro"));
		comuneImpl.setSuperficie(
			this.<String>getColumnOriginalValue("superficie"));
		comuneImpl.setPopolazioneLegale(
			this.<String>getColumnOriginalValue("popolazioneLegale"));
		comuneImpl.setPopolazioneResidente1(
			this.<String>getColumnOriginalValue("popolazioneResidente1"));
		comuneImpl.setPopolazioneResidente2(
			this.<String>getColumnOriginalValue("popolazioneResidente2"));
		comuneImpl.setPopolazioneResidente3(
			this.<String>getColumnOriginalValue("popolazioneResidente3"));
		comuneImpl.setCodiceComune(
			this.<Integer>getColumnOriginalValue("codiceComune"));
		comuneImpl.setCodiceCatastale(
			this.<String>getColumnOriginalValue("codiceCatastale"));
		comuneImpl.setIdRegione(this.<Long>getColumnOriginalValue("idRegione"));
		comuneImpl.setIdProvincia(
			this.<Long>getColumnOriginalValue("idProvincia"));

		return comuneImpl;
	}

	@Override
	public int compareTo(Comune comune) {
		int value = 0;

		value = getDenominazione().compareTo(comune.getDenominazione());

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object object) {
		if (this == object) {
			return true;
		}

		if (!(object instanceof Comune)) {
			return false;
		}

		Comune comune = (Comune)object;

		long primaryKey = comune.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isEntityCacheEnabled() {
		return true;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isFinderCacheEnabled() {
		return true;
	}

	@Override
	public void resetOriginalValues() {
		_columnOriginalValues = Collections.emptyMap();

		_columnBitmask = 0;
	}

	@Override
	public CacheModel<Comune> toCacheModel() {
		ComuneCacheModel comuneCacheModel = new ComuneCacheModel();

		comuneCacheModel.comuneId = getComuneId();

		comuneCacheModel.codiceIstatAN = getCodiceIstatAN();

		String codiceIstatAN = comuneCacheModel.codiceIstatAN;

		if ((codiceIstatAN != null) && (codiceIstatAN.length() == 0)) {
			comuneCacheModel.codiceIstatAN = null;
		}

		comuneCacheModel.codiceIstat1 = getCodiceIstat1();

		String codiceIstat1 = comuneCacheModel.codiceIstat1;

		if ((codiceIstat1 != null) && (codiceIstat1.length() == 0)) {
			comuneCacheModel.codiceIstat1 = null;
		}

		comuneCacheModel.codiceIstat103 = getCodiceIstat103();

		String codiceIstat103 = comuneCacheModel.codiceIstat103;

		if ((codiceIstat103 != null) && (codiceIstat103.length() == 0)) {
			comuneCacheModel.codiceIstat103 = null;
		}

		comuneCacheModel.codicestat107 = getCodicestat107();

		String codicestat107 = comuneCacheModel.codicestat107;

		if ((codicestat107 != null) && (codicestat107.length() == 0)) {
			comuneCacheModel.codicestat107 = null;
		}

		comuneCacheModel.denominazione = getDenominazione();

		String denominazione = comuneCacheModel.denominazione;

		if ((denominazione != null) && (denominazione.length() == 0)) {
			comuneCacheModel.denominazione = null;
		}

		comuneCacheModel.capoluogo = isCapoluogo();

		comuneCacheModel.zonaAltimetrica = getZonaAltimetrica();

		String zonaAltimetrica = comuneCacheModel.zonaAltimetrica;

		if ((zonaAltimetrica != null) && (zonaAltimetrica.length() == 0)) {
			comuneCacheModel.zonaAltimetrica = null;
		}

		comuneCacheModel.altitudine = getAltitudine();

		String altitudine = comuneCacheModel.altitudine;

		if ((altitudine != null) && (altitudine.length() == 0)) {
			comuneCacheModel.altitudine = null;
		}

		comuneCacheModel.comuneLitoraneo = isComuneLitoraneo();

		comuneCacheModel.comuneMontano = getComuneMontano();

		String comuneMontano = comuneCacheModel.comuneMontano;

		if ((comuneMontano != null) && (comuneMontano.length() == 0)) {
			comuneCacheModel.comuneMontano = null;
		}

		comuneCacheModel.codiceSistemaLocaleLavoro =
			getCodiceSistemaLocaleLavoro();

		String codiceSistemaLocaleLavoro =
			comuneCacheModel.codiceSistemaLocaleLavoro;

		if ((codiceSistemaLocaleLavoro != null) &&
			(codiceSistemaLocaleLavoro.length() == 0)) {

			comuneCacheModel.codiceSistemaLocaleLavoro = null;
		}

		comuneCacheModel.denominazioneSistemaLocaleLavoro =
			getDenominazioneSistemaLocaleLavoro();

		String denominazioneSistemaLocaleLavoro =
			comuneCacheModel.denominazioneSistemaLocaleLavoro;

		if ((denominazioneSistemaLocaleLavoro != null) &&
			(denominazioneSistemaLocaleLavoro.length() == 0)) {

			comuneCacheModel.denominazioneSistemaLocaleLavoro = null;
		}

		comuneCacheModel.superficie = getSuperficie();

		String superficie = comuneCacheModel.superficie;

		if ((superficie != null) && (superficie.length() == 0)) {
			comuneCacheModel.superficie = null;
		}

		comuneCacheModel.popolazioneLegale = getPopolazioneLegale();

		String popolazioneLegale = comuneCacheModel.popolazioneLegale;

		if ((popolazioneLegale != null) && (popolazioneLegale.length() == 0)) {
			comuneCacheModel.popolazioneLegale = null;
		}

		comuneCacheModel.popolazioneResidente1 = getPopolazioneResidente1();

		String popolazioneResidente1 = comuneCacheModel.popolazioneResidente1;

		if ((popolazioneResidente1 != null) &&
			(popolazioneResidente1.length() == 0)) {

			comuneCacheModel.popolazioneResidente1 = null;
		}

		comuneCacheModel.popolazioneResidente2 = getPopolazioneResidente2();

		String popolazioneResidente2 = comuneCacheModel.popolazioneResidente2;

		if ((popolazioneResidente2 != null) &&
			(popolazioneResidente2.length() == 0)) {

			comuneCacheModel.popolazioneResidente2 = null;
		}

		comuneCacheModel.popolazioneResidente3 = getPopolazioneResidente3();

		String popolazioneResidente3 = comuneCacheModel.popolazioneResidente3;

		if ((popolazioneResidente3 != null) &&
			(popolazioneResidente3.length() == 0)) {

			comuneCacheModel.popolazioneResidente3 = null;
		}

		comuneCacheModel.codiceComune = getCodiceComune();

		comuneCacheModel.codiceCatastale = getCodiceCatastale();

		String codiceCatastale = comuneCacheModel.codiceCatastale;

		if ((codiceCatastale != null) && (codiceCatastale.length() == 0)) {
			comuneCacheModel.codiceCatastale = null;
		}

		comuneCacheModel.idRegione = getIdRegione();

		comuneCacheModel.idProvincia = getIdProvincia();

		return comuneCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<Comune, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 2);

		sb.append("{");

		for (Map.Entry<String, Function<Comune, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<Comune, Object> attributeGetterFunction = entry.getValue();

			sb.append("\"");
			sb.append(attributeName);
			sb.append("\": ");

			Object value = attributeGetterFunction.apply((Comune)this);

			if (value == null) {
				sb.append("null");
			}
			else if (value instanceof Blob || value instanceof Date ||
					 value instanceof Map || value instanceof String) {

				sb.append(
					"\"" + StringUtil.replace(value.toString(), "\"", "'") +
						"\"");
			}
			else {
				sb.append(value);
			}

			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		Map<String, Function<Comune, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 4);

		sb.append("<model><model-name>");
		sb.append(getModelClassName());
		sb.append("</model-name>");

		for (Map.Entry<String, Function<Comune, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<Comune, Object> attributeGetterFunction = entry.getValue();

			sb.append("<column><column-name>");
			sb.append(attributeName);
			sb.append("</column-name><column-value><![CDATA[");
			sb.append(attributeGetterFunction.apply((Comune)this));
			sb.append("]]></column-value></column>");
		}

		sb.append("</model>");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function<InvocationHandler, Comune>
			_escapedModelProxyProviderFunction = _getProxyProviderFunction();

	}

	private long _comuneId;
	private String _codiceIstatAN;
	private String _codiceIstat1;
	private String _codiceIstat103;
	private String _codicestat107;
	private String _denominazione;
	private boolean _capoluogo;
	private String _zonaAltimetrica;
	private String _altitudine;
	private boolean _comuneLitoraneo;
	private String _comuneMontano;
	private String _codiceSistemaLocaleLavoro;
	private String _denominazioneSistemaLocaleLavoro;
	private String _superficie;
	private String _popolazioneLegale;
	private String _popolazioneResidente1;
	private String _popolazioneResidente2;
	private String _popolazioneResidente3;
	private int _codiceComune;
	private String _codiceCatastale;
	private long _idRegione;
	private long _idProvincia;

	public <T> T getColumnValue(String columnName) {
		Function<Comune, Object> function = _attributeGetterFunctions.get(
			columnName);

		if (function == null) {
			throw new IllegalArgumentException(
				"No attribute getter function found for " + columnName);
		}

		return (T)function.apply((Comune)this);
	}

	public <T> T getColumnOriginalValue(String columnName) {
		if (_columnOriginalValues == null) {
			return null;
		}

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		return (T)_columnOriginalValues.get(columnName);
	}

	private void _setColumnOriginalValues() {
		_columnOriginalValues = new HashMap<String, Object>();

		_columnOriginalValues.put("comuneId", _comuneId);
		_columnOriginalValues.put("codiceIstatAN", _codiceIstatAN);
		_columnOriginalValues.put("codiceIstat1", _codiceIstat1);
		_columnOriginalValues.put("codiceIstat103", _codiceIstat103);
		_columnOriginalValues.put("codicestat107", _codicestat107);
		_columnOriginalValues.put("denominazione", _denominazione);
		_columnOriginalValues.put("capoluogo", _capoluogo);
		_columnOriginalValues.put("zonaAltimetrica", _zonaAltimetrica);
		_columnOriginalValues.put("altitudine", _altitudine);
		_columnOriginalValues.put("comuneLitoraneo", _comuneLitoraneo);
		_columnOriginalValues.put("comuneMontano", _comuneMontano);
		_columnOriginalValues.put(
			"codiceSistemaLocaleLavoro", _codiceSistemaLocaleLavoro);
		_columnOriginalValues.put(
			"denominazioneSistemaLocaleLavoro",
			_denominazioneSistemaLocaleLavoro);
		_columnOriginalValues.put("superficie", _superficie);
		_columnOriginalValues.put("popolazioneLegale", _popolazioneLegale);
		_columnOriginalValues.put(
			"popolazioneResidente1", _popolazioneResidente1);
		_columnOriginalValues.put(
			"popolazioneResidente2", _popolazioneResidente2);
		_columnOriginalValues.put(
			"popolazioneResidente3", _popolazioneResidente3);
		_columnOriginalValues.put("codiceComune", _codiceComune);
		_columnOriginalValues.put("codiceCatastale", _codiceCatastale);
		_columnOriginalValues.put("idRegione", _idRegione);
		_columnOriginalValues.put("idProvincia", _idProvincia);
	}

	private transient Map<String, Object> _columnOriginalValues;

	public static long getColumnBitmask(String columnName) {
		return _columnBitmasks.get(columnName);
	}

	private static final Map<String, Long> _columnBitmasks;

	static {
		Map<String, Long> columnBitmasks = new HashMap<>();

		columnBitmasks.put("comuneId", 1L);

		columnBitmasks.put("codiceIstatAN", 2L);

		columnBitmasks.put("codiceIstat1", 4L);

		columnBitmasks.put("codiceIstat103", 8L);

		columnBitmasks.put("codicestat107", 16L);

		columnBitmasks.put("denominazione", 32L);

		columnBitmasks.put("capoluogo", 64L);

		columnBitmasks.put("zonaAltimetrica", 128L);

		columnBitmasks.put("altitudine", 256L);

		columnBitmasks.put("comuneLitoraneo", 512L);

		columnBitmasks.put("comuneMontano", 1024L);

		columnBitmasks.put("codiceSistemaLocaleLavoro", 2048L);

		columnBitmasks.put("denominazioneSistemaLocaleLavoro", 4096L);

		columnBitmasks.put("superficie", 8192L);

		columnBitmasks.put("popolazioneLegale", 16384L);

		columnBitmasks.put("popolazioneResidente1", 32768L);

		columnBitmasks.put("popolazioneResidente2", 65536L);

		columnBitmasks.put("popolazioneResidente3", 131072L);

		columnBitmasks.put("codiceComune", 262144L);

		columnBitmasks.put("codiceCatastale", 524288L);

		columnBitmasks.put("idRegione", 1048576L);

		columnBitmasks.put("idProvincia", 2097152L);

		_columnBitmasks = Collections.unmodifiableMap(columnBitmasks);
	}

	private long _columnBitmask;
	private Comune _escapedModel;

}