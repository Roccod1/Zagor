/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package it.servizidigitali.common.model.impl;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringUtil;

import it.servizidigitali.common.model.StatoEstero;
import it.servizidigitali.common.model.StatoEsteroModel;

import java.io.Serializable;

import java.lang.reflect.Constructor;
import java.lang.reflect.InvocationHandler;

import java.sql.Blob;
import java.sql.Types;

import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.Objects;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the StatoEstero service. Represents a row in the &quot;stato_estero&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>StatoEsteroModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link StatoEsteroImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see StatoEsteroImpl
 * @generated
 */
public class StatoEsteroModelImpl
	extends BaseModelImpl<StatoEstero> implements StatoEsteroModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a stato estero model instance should use the <code>StatoEstero</code> interface instead.
	 */
	public static final String TABLE_NAME = "stato_estero";

	public static final Object[][] TABLE_COLUMNS = {
		{"statoEsteroId", Types.BIGINT}, {"continente", Types.INTEGER},
		{"codiceArea", Types.INTEGER}, {"codiceStato", Types.INTEGER},
		{"denominazione", Types.VARCHAR}, {"denominazioneEng", Types.VARCHAR}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("statoEsteroId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("continente", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("codiceArea", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("codiceStato", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("denominazione", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("denominazioneEng", Types.VARCHAR);
	}

	public static final String TABLE_SQL_CREATE =
		"create table stato_estero (statoEsteroId LONG not null primary key,continente INTEGER,codiceArea INTEGER,codiceStato INTEGER,denominazione VARCHAR(75) null,denominazioneEng VARCHAR(75) null)";

	public static final String TABLE_SQL_DROP = "drop table stato_estero";

	public static final String ORDER_BY_JPQL =
		" ORDER BY statoEstero.denominazione ASC";

	public static final String ORDER_BY_SQL =
		" ORDER BY stato_estero.denominazione ASC";

	public static final String DATA_SOURCE = "servizidigitaliDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long CODICEAREA_COLUMN_BITMASK = 1L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long CODICESTATO_COLUMN_BITMASK = 2L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long CONTINENTE_COLUMN_BITMASK = 4L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long DENOMINAZIONE_COLUMN_BITMASK = 8L;

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
	}

	public StatoEsteroModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _statoEsteroId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setStatoEsteroId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _statoEsteroId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return StatoEstero.class;
	}

	@Override
	public String getModelClassName() {
		return StatoEstero.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<StatoEstero, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		for (Map.Entry<String, Function<StatoEstero, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<StatoEstero, Object> attributeGetterFunction =
				entry.getValue();

			attributes.put(
				attributeName,
				attributeGetterFunction.apply((StatoEstero)this));
		}

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<StatoEstero, Object>>
			attributeSetterBiConsumers = getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<StatoEstero, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(StatoEstero)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<StatoEstero, Object>>
		getAttributeGetterFunctions() {

		return _attributeGetterFunctions;
	}

	public Map<String, BiConsumer<StatoEstero, Object>>
		getAttributeSetterBiConsumers() {

		return _attributeSetterBiConsumers;
	}

	private static Function<InvocationHandler, StatoEstero>
		_getProxyProviderFunction() {

		Class<?> proxyClass = ProxyUtil.getProxyClass(
			StatoEstero.class.getClassLoader(), StatoEstero.class,
			ModelWrapper.class);

		try {
			Constructor<StatoEstero> constructor =
				(Constructor<StatoEstero>)proxyClass.getConstructor(
					InvocationHandler.class);

			return invocationHandler -> {
				try {
					return constructor.newInstance(invocationHandler);
				}
				catch (ReflectiveOperationException
							reflectiveOperationException) {

					throw new InternalError(reflectiveOperationException);
				}
			};
		}
		catch (NoSuchMethodException noSuchMethodException) {
			throw new InternalError(noSuchMethodException);
		}
	}

	private static final Map<String, Function<StatoEstero, Object>>
		_attributeGetterFunctions;
	private static final Map<String, BiConsumer<StatoEstero, Object>>
		_attributeSetterBiConsumers;

	static {
		Map<String, Function<StatoEstero, Object>> attributeGetterFunctions =
			new LinkedHashMap<String, Function<StatoEstero, Object>>();
		Map<String, BiConsumer<StatoEstero, ?>> attributeSetterBiConsumers =
			new LinkedHashMap<String, BiConsumer<StatoEstero, ?>>();

		attributeGetterFunctions.put(
			"statoEsteroId", StatoEstero::getStatoEsteroId);
		attributeSetterBiConsumers.put(
			"statoEsteroId",
			(BiConsumer<StatoEstero, Long>)StatoEstero::setStatoEsteroId);
		attributeGetterFunctions.put("continente", StatoEstero::getContinente);
		attributeSetterBiConsumers.put(
			"continente",
			(BiConsumer<StatoEstero, Integer>)StatoEstero::setContinente);
		attributeGetterFunctions.put("codiceArea", StatoEstero::getCodiceArea);
		attributeSetterBiConsumers.put(
			"codiceArea",
			(BiConsumer<StatoEstero, Integer>)StatoEstero::setCodiceArea);
		attributeGetterFunctions.put(
			"codiceStato", StatoEstero::getCodiceStato);
		attributeSetterBiConsumers.put(
			"codiceStato",
			(BiConsumer<StatoEstero, Integer>)StatoEstero::setCodiceStato);
		attributeGetterFunctions.put(
			"denominazione", StatoEstero::getDenominazione);
		attributeSetterBiConsumers.put(
			"denominazione",
			(BiConsumer<StatoEstero, String>)StatoEstero::setDenominazione);
		attributeGetterFunctions.put(
			"denominazioneEng", StatoEstero::getDenominazioneEng);
		attributeSetterBiConsumers.put(
			"denominazioneEng",
			(BiConsumer<StatoEstero, String>)StatoEstero::setDenominazioneEng);

		_attributeGetterFunctions = Collections.unmodifiableMap(
			attributeGetterFunctions);
		_attributeSetterBiConsumers = Collections.unmodifiableMap(
			(Map)attributeSetterBiConsumers);
	}

	@Override
	public long getStatoEsteroId() {
		return _statoEsteroId;
	}

	@Override
	public void setStatoEsteroId(long statoEsteroId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_statoEsteroId = statoEsteroId;
	}

	@Override
	public int getContinente() {
		return _continente;
	}

	@Override
	public void setContinente(int continente) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_continente = continente;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public int getOriginalContinente() {
		return GetterUtil.getInteger(
			this.<Integer>getColumnOriginalValue("continente"));
	}

	@Override
	public int getCodiceArea() {
		return _codiceArea;
	}

	@Override
	public void setCodiceArea(int codiceArea) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_codiceArea = codiceArea;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public int getOriginalCodiceArea() {
		return GetterUtil.getInteger(
			this.<Integer>getColumnOriginalValue("codiceArea"));
	}

	@Override
	public int getCodiceStato() {
		return _codiceStato;
	}

	@Override
	public void setCodiceStato(int codiceStato) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_codiceStato = codiceStato;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public int getOriginalCodiceStato() {
		return GetterUtil.getInteger(
			this.<Integer>getColumnOriginalValue("codiceStato"));
	}

	@Override
	public String getDenominazione() {
		if (_denominazione == null) {
			return "";
		}
		else {
			return _denominazione;
		}
	}

	@Override
	public void setDenominazione(String denominazione) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_denominazione = denominazione;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public String getOriginalDenominazione() {
		return getColumnOriginalValue("denominazione");
	}

	@Override
	public String getDenominazioneEng() {
		if (_denominazioneEng == null) {
			return "";
		}
		else {
			return _denominazioneEng;
		}
	}

	@Override
	public void setDenominazioneEng(String denominazioneEng) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_denominazioneEng = denominazioneEng;
	}

	public long getColumnBitmask() {
		if (_columnBitmask > 0) {
			return _columnBitmask;
		}

		if ((_columnOriginalValues == null) ||
			(_columnOriginalValues == Collections.EMPTY_MAP)) {

			return 0;
		}

		for (Map.Entry<String, Object> entry :
				_columnOriginalValues.entrySet()) {

			if (!Objects.equals(
					entry.getValue(), getColumnValue(entry.getKey()))) {

				_columnBitmask |= _columnBitmasks.get(entry.getKey());
			}
		}

		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			0, StatoEstero.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public StatoEstero toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, StatoEstero>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		StatoEsteroImpl statoEsteroImpl = new StatoEsteroImpl();

		statoEsteroImpl.setStatoEsteroId(getStatoEsteroId());
		statoEsteroImpl.setContinente(getContinente());
		statoEsteroImpl.setCodiceArea(getCodiceArea());
		statoEsteroImpl.setCodiceStato(getCodiceStato());
		statoEsteroImpl.setDenominazione(getDenominazione());
		statoEsteroImpl.setDenominazioneEng(getDenominazioneEng());

		statoEsteroImpl.resetOriginalValues();

		return statoEsteroImpl;
	}

	@Override
	public StatoEstero cloneWithOriginalValues() {
		StatoEsteroImpl statoEsteroImpl = new StatoEsteroImpl();

		statoEsteroImpl.setStatoEsteroId(
			this.<Long>getColumnOriginalValue("statoEsteroId"));
		statoEsteroImpl.setContinente(
			this.<Integer>getColumnOriginalValue("continente"));
		statoEsteroImpl.setCodiceArea(
			this.<Integer>getColumnOriginalValue("codiceArea"));
		statoEsteroImpl.setCodiceStato(
			this.<Integer>getColumnOriginalValue("codiceStato"));
		statoEsteroImpl.setDenominazione(
			this.<String>getColumnOriginalValue("denominazione"));
		statoEsteroImpl.setDenominazioneEng(
			this.<String>getColumnOriginalValue("denominazioneEng"));

		return statoEsteroImpl;
	}

	@Override
	public int compareTo(StatoEstero statoEstero) {
		int value = 0;

		value = getDenominazione().compareTo(statoEstero.getDenominazione());

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object object) {
		if (this == object) {
			return true;
		}

		if (!(object instanceof StatoEstero)) {
			return false;
		}

		StatoEstero statoEstero = (StatoEstero)object;

		long primaryKey = statoEstero.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isEntityCacheEnabled() {
		return true;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isFinderCacheEnabled() {
		return true;
	}

	@Override
	public void resetOriginalValues() {
		_columnOriginalValues = Collections.emptyMap();

		_columnBitmask = 0;
	}

	@Override
	public CacheModel<StatoEstero> toCacheModel() {
		StatoEsteroCacheModel statoEsteroCacheModel =
			new StatoEsteroCacheModel();

		statoEsteroCacheModel.statoEsteroId = getStatoEsteroId();

		statoEsteroCacheModel.continente = getContinente();

		statoEsteroCacheModel.codiceArea = getCodiceArea();

		statoEsteroCacheModel.codiceStato = getCodiceStato();

		statoEsteroCacheModel.denominazione = getDenominazione();

		String denominazione = statoEsteroCacheModel.denominazione;

		if ((denominazione != null) && (denominazione.length() == 0)) {
			statoEsteroCacheModel.denominazione = null;
		}

		statoEsteroCacheModel.denominazioneEng = getDenominazioneEng();

		String denominazioneEng = statoEsteroCacheModel.denominazioneEng;

		if ((denominazioneEng != null) && (denominazioneEng.length() == 0)) {
			statoEsteroCacheModel.denominazioneEng = null;
		}

		return statoEsteroCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<StatoEstero, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 2);

		sb.append("{");

		for (Map.Entry<String, Function<StatoEstero, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<StatoEstero, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("\"");
			sb.append(attributeName);
			sb.append("\": ");

			Object value = attributeGetterFunction.apply((StatoEstero)this);

			if (value == null) {
				sb.append("null");
			}
			else if (value instanceof Blob || value instanceof Date ||
					 value instanceof Map || value instanceof String) {

				sb.append(
					"\"" + StringUtil.replace(value.toString(), "\"", "'") +
						"\"");
			}
			else {
				sb.append(value);
			}

			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		Map<String, Function<StatoEstero, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 4);

		sb.append("<model><model-name>");
		sb.append(getModelClassName());
		sb.append("</model-name>");

		for (Map.Entry<String, Function<StatoEstero, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<StatoEstero, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("<column><column-name>");
			sb.append(attributeName);
			sb.append("</column-name><column-value><![CDATA[");
			sb.append(attributeGetterFunction.apply((StatoEstero)this));
			sb.append("]]></column-value></column>");
		}

		sb.append("</model>");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function<InvocationHandler, StatoEstero>
			_escapedModelProxyProviderFunction = _getProxyProviderFunction();

	}

	private long _statoEsteroId;
	private int _continente;
	private int _codiceArea;
	private int _codiceStato;
	private String _denominazione;
	private String _denominazioneEng;

	public <T> T getColumnValue(String columnName) {
		Function<StatoEstero, Object> function = _attributeGetterFunctions.get(
			columnName);

		if (function == null) {
			throw new IllegalArgumentException(
				"No attribute getter function found for " + columnName);
		}

		return (T)function.apply((StatoEstero)this);
	}

	public <T> T getColumnOriginalValue(String columnName) {
		if (_columnOriginalValues == null) {
			return null;
		}

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		return (T)_columnOriginalValues.get(columnName);
	}

	private void _setColumnOriginalValues() {
		_columnOriginalValues = new HashMap<String, Object>();

		_columnOriginalValues.put("statoEsteroId", _statoEsteroId);
		_columnOriginalValues.put("continente", _continente);
		_columnOriginalValues.put("codiceArea", _codiceArea);
		_columnOriginalValues.put("codiceStato", _codiceStato);
		_columnOriginalValues.put("denominazione", _denominazione);
		_columnOriginalValues.put("denominazioneEng", _denominazioneEng);
	}

	private transient Map<String, Object> _columnOriginalValues;

	public static long getColumnBitmask(String columnName) {
		return _columnBitmasks.get(columnName);
	}

	private static final Map<String, Long> _columnBitmasks;

	static {
		Map<String, Long> columnBitmasks = new HashMap<>();

		columnBitmasks.put("statoEsteroId", 1L);

		columnBitmasks.put("continente", 2L);

		columnBitmasks.put("codiceArea", 4L);

		columnBitmasks.put("codiceStato", 8L);

		columnBitmasks.put("denominazione", 16L);

		columnBitmasks.put("denominazioneEng", 32L);

		_columnBitmasks = Collections.unmodifiableMap(columnBitmasks);
	}

	private long _columnBitmask;
	private StatoEstero _escapedModel;

}