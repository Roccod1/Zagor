/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package it.servizidigitali.common.model.impl;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringUtil;

import it.servizidigitali.common.model.Provincia;
import it.servizidigitali.common.model.ProvinciaModel;

import java.io.Serializable;

import java.lang.reflect.Constructor;
import java.lang.reflect.InvocationHandler;

import java.sql.Blob;
import java.sql.Types;

import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.Objects;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the Provincia service. Represents a row in the &quot;provincia&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>ProvinciaModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link ProvinciaImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see ProvinciaImpl
 * @generated
 */
public class ProvinciaModelImpl
	extends BaseModelImpl<Provincia> implements ProvinciaModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a provincia model instance should use the <code>Provincia</code> interface instead.
	 */
	public static final String TABLE_NAME = "provincia";

	public static final Object[][] TABLE_COLUMNS = {
		{"provinciaId", Types.BIGINT}, {"codiceRipartizione", Types.INTEGER},
		{"codiceNUTS1", Types.VARCHAR},
		{"ripartizioneGeograficaM", Types.VARCHAR},
		{"ripartizioneGeografica", Types.VARCHAR},
		{"denominazioneRegioneM", Types.VARCHAR},
		{"denominazioneRegione", Types.VARCHAR},
		{"denominazioneProvincia", Types.VARCHAR},
		{"codiceRegione", Types.BIGINT}, {"codiceNUTS2", Types.VARCHAR},
		{"codiceNUTS3", Types.VARCHAR}, {"sigla", Types.VARCHAR}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("provinciaId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("codiceRipartizione", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("codiceNUTS1", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("ripartizioneGeograficaM", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("ripartizioneGeografica", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("denominazioneRegioneM", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("denominazioneRegione", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("denominazioneProvincia", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("codiceRegione", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("codiceNUTS2", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("codiceNUTS3", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("sigla", Types.VARCHAR);
	}

	public static final String TABLE_SQL_CREATE =
		"create table provincia (provinciaId LONG not null primary key,codiceRipartizione INTEGER,codiceNUTS1 VARCHAR(75) null,ripartizioneGeograficaM VARCHAR(75) null,ripartizioneGeografica VARCHAR(75) null,denominazioneRegioneM VARCHAR(75) null,denominazioneRegione VARCHAR(75) null,denominazioneProvincia VARCHAR(75) null,codiceRegione LONG,codiceNUTS2 VARCHAR(75) null,codiceNUTS3 VARCHAR(75) null,sigla VARCHAR(75) null)";

	public static final String TABLE_SQL_DROP = "drop table provincia";

	public static final String ORDER_BY_JPQL = " ORDER BY provincia.sigla ASC";

	public static final String ORDER_BY_SQL = " ORDER BY provincia.sigla ASC";

	public static final String DATA_SOURCE = "servizidigitaliDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long CODICENUTS1_COLUMN_BITMASK = 1L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long CODICEREGIONE_COLUMN_BITMASK = 2L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long SIGLA_COLUMN_BITMASK = 4L;

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
	}

	public ProvinciaModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _provinciaId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setProvinciaId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _provinciaId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return Provincia.class;
	}

	@Override
	public String getModelClassName() {
		return Provincia.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<Provincia, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		for (Map.Entry<String, Function<Provincia, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<Provincia, Object> attributeGetterFunction =
				entry.getValue();

			attributes.put(
				attributeName, attributeGetterFunction.apply((Provincia)this));
		}

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<Provincia, Object>> attributeSetterBiConsumers =
			getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<Provincia, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(Provincia)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<Provincia, Object>>
		getAttributeGetterFunctions() {

		return _attributeGetterFunctions;
	}

	public Map<String, BiConsumer<Provincia, Object>>
		getAttributeSetterBiConsumers() {

		return _attributeSetterBiConsumers;
	}

	private static Function<InvocationHandler, Provincia>
		_getProxyProviderFunction() {

		Class<?> proxyClass = ProxyUtil.getProxyClass(
			Provincia.class.getClassLoader(), Provincia.class,
			ModelWrapper.class);

		try {
			Constructor<Provincia> constructor =
				(Constructor<Provincia>)proxyClass.getConstructor(
					InvocationHandler.class);

			return invocationHandler -> {
				try {
					return constructor.newInstance(invocationHandler);
				}
				catch (ReflectiveOperationException
							reflectiveOperationException) {

					throw new InternalError(reflectiveOperationException);
				}
			};
		}
		catch (NoSuchMethodException noSuchMethodException) {
			throw new InternalError(noSuchMethodException);
		}
	}

	private static final Map<String, Function<Provincia, Object>>
		_attributeGetterFunctions;
	private static final Map<String, BiConsumer<Provincia, Object>>
		_attributeSetterBiConsumers;

	static {
		Map<String, Function<Provincia, Object>> attributeGetterFunctions =
			new LinkedHashMap<String, Function<Provincia, Object>>();
		Map<String, BiConsumer<Provincia, ?>> attributeSetterBiConsumers =
			new LinkedHashMap<String, BiConsumer<Provincia, ?>>();

		attributeGetterFunctions.put("provinciaId", Provincia::getProvinciaId);
		attributeSetterBiConsumers.put(
			"provinciaId",
			(BiConsumer<Provincia, Long>)Provincia::setProvinciaId);
		attributeGetterFunctions.put(
			"codiceRipartizione", Provincia::getCodiceRipartizione);
		attributeSetterBiConsumers.put(
			"codiceRipartizione",
			(BiConsumer<Provincia, Integer>)Provincia::setCodiceRipartizione);
		attributeGetterFunctions.put("codiceNUTS1", Provincia::getCodiceNUTS1);
		attributeSetterBiConsumers.put(
			"codiceNUTS1",
			(BiConsumer<Provincia, String>)Provincia::setCodiceNUTS1);
		attributeGetterFunctions.put(
			"ripartizioneGeograficaM", Provincia::getRipartizioneGeograficaM);
		attributeSetterBiConsumers.put(
			"ripartizioneGeograficaM",
			(BiConsumer<Provincia, String>)
				Provincia::setRipartizioneGeograficaM);
		attributeGetterFunctions.put(
			"ripartizioneGeografica", Provincia::getRipartizioneGeografica);
		attributeSetterBiConsumers.put(
			"ripartizioneGeografica",
			(BiConsumer<Provincia, String>)
				Provincia::setRipartizioneGeografica);
		attributeGetterFunctions.put(
			"denominazioneRegioneM", Provincia::getDenominazioneRegioneM);
		attributeSetterBiConsumers.put(
			"denominazioneRegioneM",
			(BiConsumer<Provincia, String>)Provincia::setDenominazioneRegioneM);
		attributeGetterFunctions.put(
			"denominazioneRegione", Provincia::getDenominazioneRegione);
		attributeSetterBiConsumers.put(
			"denominazioneRegione",
			(BiConsumer<Provincia, String>)Provincia::setDenominazioneRegione);
		attributeGetterFunctions.put(
			"denominazioneProvincia", Provincia::getDenominazioneProvincia);
		attributeSetterBiConsumers.put(
			"denominazioneProvincia",
			(BiConsumer<Provincia, String>)
				Provincia::setDenominazioneProvincia);
		attributeGetterFunctions.put(
			"codiceRegione", Provincia::getCodiceRegione);
		attributeSetterBiConsumers.put(
			"codiceRegione",
			(BiConsumer<Provincia, Long>)Provincia::setCodiceRegione);
		attributeGetterFunctions.put("codiceNUTS2", Provincia::getCodiceNUTS2);
		attributeSetterBiConsumers.put(
			"codiceNUTS2",
			(BiConsumer<Provincia, String>)Provincia::setCodiceNUTS2);
		attributeGetterFunctions.put("codiceNUTS3", Provincia::getCodiceNUTS3);
		attributeSetterBiConsumers.put(
			"codiceNUTS3",
			(BiConsumer<Provincia, String>)Provincia::setCodiceNUTS3);
		attributeGetterFunctions.put("sigla", Provincia::getSigla);
		attributeSetterBiConsumers.put(
			"sigla", (BiConsumer<Provincia, String>)Provincia::setSigla);

		_attributeGetterFunctions = Collections.unmodifiableMap(
			attributeGetterFunctions);
		_attributeSetterBiConsumers = Collections.unmodifiableMap(
			(Map)attributeSetterBiConsumers);
	}

	@Override
	public long getProvinciaId() {
		return _provinciaId;
	}

	@Override
	public void setProvinciaId(long provinciaId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_provinciaId = provinciaId;
	}

	@Override
	public int getCodiceRipartizione() {
		return _codiceRipartizione;
	}

	@Override
	public void setCodiceRipartizione(int codiceRipartizione) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_codiceRipartizione = codiceRipartizione;
	}

	@Override
	public String getCodiceNUTS1() {
		if (_codiceNUTS1 == null) {
			return "";
		}
		else {
			return _codiceNUTS1;
		}
	}

	@Override
	public void setCodiceNUTS1(String codiceNUTS1) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_codiceNUTS1 = codiceNUTS1;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public String getOriginalCodiceNUTS1() {
		return getColumnOriginalValue("codiceNUTS1");
	}

	@Override
	public String getRipartizioneGeograficaM() {
		if (_ripartizioneGeograficaM == null) {
			return "";
		}
		else {
			return _ripartizioneGeograficaM;
		}
	}

	@Override
	public void setRipartizioneGeograficaM(String ripartizioneGeograficaM) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_ripartizioneGeograficaM = ripartizioneGeograficaM;
	}

	@Override
	public String getRipartizioneGeografica() {
		if (_ripartizioneGeografica == null) {
			return "";
		}
		else {
			return _ripartizioneGeografica;
		}
	}

	@Override
	public void setRipartizioneGeografica(String ripartizioneGeografica) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_ripartizioneGeografica = ripartizioneGeografica;
	}

	@Override
	public String getDenominazioneRegioneM() {
		if (_denominazioneRegioneM == null) {
			return "";
		}
		else {
			return _denominazioneRegioneM;
		}
	}

	@Override
	public void setDenominazioneRegioneM(String denominazioneRegioneM) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_denominazioneRegioneM = denominazioneRegioneM;
	}

	@Override
	public String getDenominazioneRegione() {
		if (_denominazioneRegione == null) {
			return "";
		}
		else {
			return _denominazioneRegione;
		}
	}

	@Override
	public void setDenominazioneRegione(String denominazioneRegione) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_denominazioneRegione = denominazioneRegione;
	}

	@Override
	public String getDenominazioneProvincia() {
		if (_denominazioneProvincia == null) {
			return "";
		}
		else {
			return _denominazioneProvincia;
		}
	}

	@Override
	public void setDenominazioneProvincia(String denominazioneProvincia) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_denominazioneProvincia = denominazioneProvincia;
	}

	@Override
	public long getCodiceRegione() {
		return _codiceRegione;
	}

	@Override
	public void setCodiceRegione(long codiceRegione) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_codiceRegione = codiceRegione;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalCodiceRegione() {
		return GetterUtil.getLong(
			this.<Long>getColumnOriginalValue("codiceRegione"));
	}

	@Override
	public String getCodiceNUTS2() {
		if (_codiceNUTS2 == null) {
			return "";
		}
		else {
			return _codiceNUTS2;
		}
	}

	@Override
	public void setCodiceNUTS2(String codiceNUTS2) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_codiceNUTS2 = codiceNUTS2;
	}

	@Override
	public String getCodiceNUTS3() {
		if (_codiceNUTS3 == null) {
			return "";
		}
		else {
			return _codiceNUTS3;
		}
	}

	@Override
	public void setCodiceNUTS3(String codiceNUTS3) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_codiceNUTS3 = codiceNUTS3;
	}

	@Override
	public String getSigla() {
		if (_sigla == null) {
			return "";
		}
		else {
			return _sigla;
		}
	}

	@Override
	public void setSigla(String sigla) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_sigla = sigla;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public String getOriginalSigla() {
		return getColumnOriginalValue("sigla");
	}

	public long getColumnBitmask() {
		if (_columnBitmask > 0) {
			return _columnBitmask;
		}

		if ((_columnOriginalValues == null) ||
			(_columnOriginalValues == Collections.EMPTY_MAP)) {

			return 0;
		}

		for (Map.Entry<String, Object> entry :
				_columnOriginalValues.entrySet()) {

			if (!Objects.equals(
					entry.getValue(), getColumnValue(entry.getKey()))) {

				_columnBitmask |= _columnBitmasks.get(entry.getKey());
			}
		}

		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			0, Provincia.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public Provincia toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, Provincia>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		ProvinciaImpl provinciaImpl = new ProvinciaImpl();

		provinciaImpl.setProvinciaId(getProvinciaId());
		provinciaImpl.setCodiceRipartizione(getCodiceRipartizione());
		provinciaImpl.setCodiceNUTS1(getCodiceNUTS1());
		provinciaImpl.setRipartizioneGeograficaM(getRipartizioneGeograficaM());
		provinciaImpl.setRipartizioneGeografica(getRipartizioneGeografica());
		provinciaImpl.setDenominazioneRegioneM(getDenominazioneRegioneM());
		provinciaImpl.setDenominazioneRegione(getDenominazioneRegione());
		provinciaImpl.setDenominazioneProvincia(getDenominazioneProvincia());
		provinciaImpl.setCodiceRegione(getCodiceRegione());
		provinciaImpl.setCodiceNUTS2(getCodiceNUTS2());
		provinciaImpl.setCodiceNUTS3(getCodiceNUTS3());
		provinciaImpl.setSigla(getSigla());

		provinciaImpl.resetOriginalValues();

		return provinciaImpl;
	}

	@Override
	public Provincia cloneWithOriginalValues() {
		ProvinciaImpl provinciaImpl = new ProvinciaImpl();

		provinciaImpl.setProvinciaId(
			this.<Long>getColumnOriginalValue("provinciaId"));
		provinciaImpl.setCodiceRipartizione(
			this.<Integer>getColumnOriginalValue("codiceRipartizione"));
		provinciaImpl.setCodiceNUTS1(
			this.<String>getColumnOriginalValue("codiceNUTS1"));
		provinciaImpl.setRipartizioneGeograficaM(
			this.<String>getColumnOriginalValue("ripartizioneGeograficaM"));
		provinciaImpl.setRipartizioneGeografica(
			this.<String>getColumnOriginalValue("ripartizioneGeografica"));
		provinciaImpl.setDenominazioneRegioneM(
			this.<String>getColumnOriginalValue("denominazioneRegioneM"));
		provinciaImpl.setDenominazioneRegione(
			this.<String>getColumnOriginalValue("denominazioneRegione"));
		provinciaImpl.setDenominazioneProvincia(
			this.<String>getColumnOriginalValue("denominazioneProvincia"));
		provinciaImpl.setCodiceRegione(
			this.<Long>getColumnOriginalValue("codiceRegione"));
		provinciaImpl.setCodiceNUTS2(
			this.<String>getColumnOriginalValue("codiceNUTS2"));
		provinciaImpl.setCodiceNUTS3(
			this.<String>getColumnOriginalValue("codiceNUTS3"));
		provinciaImpl.setSigla(this.<String>getColumnOriginalValue("sigla"));

		return provinciaImpl;
	}

	@Override
	public int compareTo(Provincia provincia) {
		int value = 0;

		value = getSigla().compareTo(provincia.getSigla());

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object object) {
		if (this == object) {
			return true;
		}

		if (!(object instanceof Provincia)) {
			return false;
		}

		Provincia provincia = (Provincia)object;

		long primaryKey = provincia.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isEntityCacheEnabled() {
		return true;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isFinderCacheEnabled() {
		return true;
	}

	@Override
	public void resetOriginalValues() {
		_columnOriginalValues = Collections.emptyMap();

		_columnBitmask = 0;
	}

	@Override
	public CacheModel<Provincia> toCacheModel() {
		ProvinciaCacheModel provinciaCacheModel = new ProvinciaCacheModel();

		provinciaCacheModel.provinciaId = getProvinciaId();

		provinciaCacheModel.codiceRipartizione = getCodiceRipartizione();

		provinciaCacheModel.codiceNUTS1 = getCodiceNUTS1();

		String codiceNUTS1 = provinciaCacheModel.codiceNUTS1;

		if ((codiceNUTS1 != null) && (codiceNUTS1.length() == 0)) {
			provinciaCacheModel.codiceNUTS1 = null;
		}

		provinciaCacheModel.ripartizioneGeograficaM =
			getRipartizioneGeograficaM();

		String ripartizioneGeograficaM =
			provinciaCacheModel.ripartizioneGeograficaM;

		if ((ripartizioneGeograficaM != null) &&
			(ripartizioneGeograficaM.length() == 0)) {

			provinciaCacheModel.ripartizioneGeograficaM = null;
		}

		provinciaCacheModel.ripartizioneGeografica =
			getRipartizioneGeografica();

		String ripartizioneGeografica =
			provinciaCacheModel.ripartizioneGeografica;

		if ((ripartizioneGeografica != null) &&
			(ripartizioneGeografica.length() == 0)) {

			provinciaCacheModel.ripartizioneGeografica = null;
		}

		provinciaCacheModel.denominazioneRegioneM = getDenominazioneRegioneM();

		String denominazioneRegioneM =
			provinciaCacheModel.denominazioneRegioneM;

		if ((denominazioneRegioneM != null) &&
			(denominazioneRegioneM.length() == 0)) {

			provinciaCacheModel.denominazioneRegioneM = null;
		}

		provinciaCacheModel.denominazioneRegione = getDenominazioneRegione();

		String denominazioneRegione = provinciaCacheModel.denominazioneRegione;

		if ((denominazioneRegione != null) &&
			(denominazioneRegione.length() == 0)) {

			provinciaCacheModel.denominazioneRegione = null;
		}

		provinciaCacheModel.denominazioneProvincia =
			getDenominazioneProvincia();

		String denominazioneProvincia =
			provinciaCacheModel.denominazioneProvincia;

		if ((denominazioneProvincia != null) &&
			(denominazioneProvincia.length() == 0)) {

			provinciaCacheModel.denominazioneProvincia = null;
		}

		provinciaCacheModel.codiceRegione = getCodiceRegione();

		provinciaCacheModel.codiceNUTS2 = getCodiceNUTS2();

		String codiceNUTS2 = provinciaCacheModel.codiceNUTS2;

		if ((codiceNUTS2 != null) && (codiceNUTS2.length() == 0)) {
			provinciaCacheModel.codiceNUTS2 = null;
		}

		provinciaCacheModel.codiceNUTS3 = getCodiceNUTS3();

		String codiceNUTS3 = provinciaCacheModel.codiceNUTS3;

		if ((codiceNUTS3 != null) && (codiceNUTS3.length() == 0)) {
			provinciaCacheModel.codiceNUTS3 = null;
		}

		provinciaCacheModel.sigla = getSigla();

		String sigla = provinciaCacheModel.sigla;

		if ((sigla != null) && (sigla.length() == 0)) {
			provinciaCacheModel.sigla = null;
		}

		return provinciaCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<Provincia, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 2);

		sb.append("{");

		for (Map.Entry<String, Function<Provincia, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<Provincia, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("\"");
			sb.append(attributeName);
			sb.append("\": ");

			Object value = attributeGetterFunction.apply((Provincia)this);

			if (value == null) {
				sb.append("null");
			}
			else if (value instanceof Blob || value instanceof Date ||
					 value instanceof Map || value instanceof String) {

				sb.append(
					"\"" + StringUtil.replace(value.toString(), "\"", "'") +
						"\"");
			}
			else {
				sb.append(value);
			}

			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		Map<String, Function<Provincia, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 4);

		sb.append("<model><model-name>");
		sb.append(getModelClassName());
		sb.append("</model-name>");

		for (Map.Entry<String, Function<Provincia, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<Provincia, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("<column><column-name>");
			sb.append(attributeName);
			sb.append("</column-name><column-value><![CDATA[");
			sb.append(attributeGetterFunction.apply((Provincia)this));
			sb.append("]]></column-value></column>");
		}

		sb.append("</model>");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function<InvocationHandler, Provincia>
			_escapedModelProxyProviderFunction = _getProxyProviderFunction();

	}

	private long _provinciaId;
	private int _codiceRipartizione;
	private String _codiceNUTS1;
	private String _ripartizioneGeograficaM;
	private String _ripartizioneGeografica;
	private String _denominazioneRegioneM;
	private String _denominazioneRegione;
	private String _denominazioneProvincia;
	private long _codiceRegione;
	private String _codiceNUTS2;
	private String _codiceNUTS3;
	private String _sigla;

	public <T> T getColumnValue(String columnName) {
		Function<Provincia, Object> function = _attributeGetterFunctions.get(
			columnName);

		if (function == null) {
			throw new IllegalArgumentException(
				"No attribute getter function found for " + columnName);
		}

		return (T)function.apply((Provincia)this);
	}

	public <T> T getColumnOriginalValue(String columnName) {
		if (_columnOriginalValues == null) {
			return null;
		}

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		return (T)_columnOriginalValues.get(columnName);
	}

	private void _setColumnOriginalValues() {
		_columnOriginalValues = new HashMap<String, Object>();

		_columnOriginalValues.put("provinciaId", _provinciaId);
		_columnOriginalValues.put("codiceRipartizione", _codiceRipartizione);
		_columnOriginalValues.put("codiceNUTS1", _codiceNUTS1);
		_columnOriginalValues.put(
			"ripartizioneGeograficaM", _ripartizioneGeograficaM);
		_columnOriginalValues.put(
			"ripartizioneGeografica", _ripartizioneGeografica);
		_columnOriginalValues.put(
			"denominazioneRegioneM", _denominazioneRegioneM);
		_columnOriginalValues.put(
			"denominazioneRegione", _denominazioneRegione);
		_columnOriginalValues.put(
			"denominazioneProvincia", _denominazioneProvincia);
		_columnOriginalValues.put("codiceRegione", _codiceRegione);
		_columnOriginalValues.put("codiceNUTS2", _codiceNUTS2);
		_columnOriginalValues.put("codiceNUTS3", _codiceNUTS3);
		_columnOriginalValues.put("sigla", _sigla);
	}

	private transient Map<String, Object> _columnOriginalValues;

	public static long getColumnBitmask(String columnName) {
		return _columnBitmasks.get(columnName);
	}

	private static final Map<String, Long> _columnBitmasks;

	static {
		Map<String, Long> columnBitmasks = new HashMap<>();

		columnBitmasks.put("provinciaId", 1L);

		columnBitmasks.put("codiceRipartizione", 2L);

		columnBitmasks.put("codiceNUTS1", 4L);

		columnBitmasks.put("ripartizioneGeograficaM", 8L);

		columnBitmasks.put("ripartizioneGeografica", 16L);

		columnBitmasks.put("denominazioneRegioneM", 32L);

		columnBitmasks.put("denominazioneRegione", 64L);

		columnBitmasks.put("denominazioneProvincia", 128L);

		columnBitmasks.put("codiceRegione", 256L);

		columnBitmasks.put("codiceNUTS2", 512L);

		columnBitmasks.put("codiceNUTS3", 1024L);

		columnBitmasks.put("sigla", 2048L);

		_columnBitmasks = Collections.unmodifiableMap(columnBitmasks);
	}

	private long _columnBitmask;
	private Provincia _escapedModel;

}