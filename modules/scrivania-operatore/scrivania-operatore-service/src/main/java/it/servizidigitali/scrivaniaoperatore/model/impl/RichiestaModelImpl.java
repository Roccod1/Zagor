/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package it.servizidigitali.scrivaniaoperatore.model.impl;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.exportimport.kernel.lar.StagedModelType;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.User;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.service.UserLocalServiceUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.PortalUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringUtil;

import it.servizidigitali.scrivaniaoperatore.model.Richiesta;
import it.servizidigitali.scrivaniaoperatore.model.RichiestaModel;

import java.io.Serializable;

import java.lang.reflect.Constructor;
import java.lang.reflect.InvocationHandler;

import java.sql.Blob;
import java.sql.Types;

import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.Objects;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the Richiesta service. Represents a row in the &quot;richiesta&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>RichiestaModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link RichiestaImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see RichiestaImpl
 * @generated
 */
public class RichiestaModelImpl
	extends BaseModelImpl<Richiesta> implements RichiestaModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a richiesta model instance should use the <code>Richiesta</code> interface instead.
	 */
	public static final String TABLE_NAME = "richiesta";

	public static final Object[][] TABLE_COLUMNS = {
		{"uuid_", Types.VARCHAR}, {"richiestaId", Types.BIGINT},
		{"groupId", Types.BIGINT}, {"companyId", Types.BIGINT},
		{"userId", Types.BIGINT}, {"userName", Types.VARCHAR},
		{"createDate", Types.TIMESTAMP}, {"modifiedDate", Types.TIMESTAMP},
		{"codiceFiscale", Types.VARCHAR}, {"partitaIva", Types.VARCHAR},
		{"email", Types.VARCHAR}, {"codiceFiscaleDelegato", Types.VARCHAR},
		{"stato", Types.VARCHAR}, {"numeroProtocollo", Types.VARCHAR},
		{"dataProtocollo", Types.TIMESTAMP}, {"oggetto", Types.VARCHAR},
		{"note", Types.VARCHAR}, {"invioGuest", Types.BOOLEAN},
		{"tokenVisualizzazione", Types.VARCHAR},
		{"chiaveAssociazioneBackoffice", Types.VARCHAR},
		{"delegaId", Types.BIGINT}, {"proceduraId", Types.BIGINT}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("uuid_", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("richiestaId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("groupId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("companyId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("createDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("modifiedDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("codiceFiscale", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("partitaIva", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("email", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("codiceFiscaleDelegato", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("stato", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("numeroProtocollo", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("dataProtocollo", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("oggetto", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("note", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("invioGuest", Types.BOOLEAN);
		TABLE_COLUMNS_MAP.put("tokenVisualizzazione", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("chiaveAssociazioneBackoffice", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("delegaId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("proceduraId", Types.BIGINT);
	}

	public static final String TABLE_SQL_CREATE =
		"create table richiesta (uuid_ VARCHAR(75) null,richiestaId LONG not null primary key,groupId LONG,companyId LONG,userId LONG,userName VARCHAR(75) null,createDate DATE null,modifiedDate DATE null,codiceFiscale VARCHAR(75) null,partitaIva VARCHAR(75) null,email VARCHAR(75) null,codiceFiscaleDelegato VARCHAR(75) null,stato VARCHAR(75) null,numeroProtocollo VARCHAR(75) null,dataProtocollo DATE null,oggetto VARCHAR(75) null,note VARCHAR(75) null,invioGuest BOOLEAN,tokenVisualizzazione VARCHAR(75) null,chiaveAssociazioneBackoffice VARCHAR(75) null,delegaId LONG,proceduraId LONG)";

	public static final String TABLE_SQL_DROP = "drop table richiesta";

	public static final String ORDER_BY_JPQL =
		" ORDER BY richiesta.richiestaId ASC";

	public static final String ORDER_BY_SQL =
		" ORDER BY richiesta.richiestaId ASC";

	public static final String DATA_SOURCE = "servizidigitaliDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long CODICEFISCALE_COLUMN_BITMASK = 1L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long CODICEFISCALEDELEGATO_COLUMN_BITMASK = 2L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long COMPANYID_COLUMN_BITMASK = 4L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long GROUPID_COLUMN_BITMASK = 8L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long INVIOGUEST_COLUMN_BITMASK = 16L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long PARTITAIVA_COLUMN_BITMASK = 32L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long PROCEDURAID_COLUMN_BITMASK = 64L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long STATO_COLUMN_BITMASK = 128L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long TOKENVISUALIZZAZIONE_COLUMN_BITMASK = 256L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long UUID_COLUMN_BITMASK = 512L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *		#getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long RICHIESTAID_COLUMN_BITMASK = 1024L;

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
	}

	public RichiestaModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _richiestaId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setRichiestaId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _richiestaId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return Richiesta.class;
	}

	@Override
	public String getModelClassName() {
		return Richiesta.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<Richiesta, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		for (Map.Entry<String, Function<Richiesta, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<Richiesta, Object> attributeGetterFunction =
				entry.getValue();

			attributes.put(
				attributeName, attributeGetterFunction.apply((Richiesta)this));
		}

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<Richiesta, Object>> attributeSetterBiConsumers =
			getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<Richiesta, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(Richiesta)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<Richiesta, Object>>
		getAttributeGetterFunctions() {

		return _attributeGetterFunctions;
	}

	public Map<String, BiConsumer<Richiesta, Object>>
		getAttributeSetterBiConsumers() {

		return _attributeSetterBiConsumers;
	}

	private static Function<InvocationHandler, Richiesta>
		_getProxyProviderFunction() {

		Class<?> proxyClass = ProxyUtil.getProxyClass(
			Richiesta.class.getClassLoader(), Richiesta.class,
			ModelWrapper.class);

		try {
			Constructor<Richiesta> constructor =
				(Constructor<Richiesta>)proxyClass.getConstructor(
					InvocationHandler.class);

			return invocationHandler -> {
				try {
					return constructor.newInstance(invocationHandler);
				}
				catch (ReflectiveOperationException
							reflectiveOperationException) {

					throw new InternalError(reflectiveOperationException);
				}
			};
		}
		catch (NoSuchMethodException noSuchMethodException) {
			throw new InternalError(noSuchMethodException);
		}
	}

	private static final Map<String, Function<Richiesta, Object>>
		_attributeGetterFunctions;
	private static final Map<String, BiConsumer<Richiesta, Object>>
		_attributeSetterBiConsumers;

	static {
		Map<String, Function<Richiesta, Object>> attributeGetterFunctions =
			new LinkedHashMap<String, Function<Richiesta, Object>>();
		Map<String, BiConsumer<Richiesta, ?>> attributeSetterBiConsumers =
			new LinkedHashMap<String, BiConsumer<Richiesta, ?>>();

		attributeGetterFunctions.put("uuid", Richiesta::getUuid);
		attributeSetterBiConsumers.put(
			"uuid", (BiConsumer<Richiesta, String>)Richiesta::setUuid);
		attributeGetterFunctions.put("richiestaId", Richiesta::getRichiestaId);
		attributeSetterBiConsumers.put(
			"richiestaId",
			(BiConsumer<Richiesta, Long>)Richiesta::setRichiestaId);
		attributeGetterFunctions.put("groupId", Richiesta::getGroupId);
		attributeSetterBiConsumers.put(
			"groupId", (BiConsumer<Richiesta, Long>)Richiesta::setGroupId);
		attributeGetterFunctions.put("companyId", Richiesta::getCompanyId);
		attributeSetterBiConsumers.put(
			"companyId", (BiConsumer<Richiesta, Long>)Richiesta::setCompanyId);
		attributeGetterFunctions.put("userId", Richiesta::getUserId);
		attributeSetterBiConsumers.put(
			"userId", (BiConsumer<Richiesta, Long>)Richiesta::setUserId);
		attributeGetterFunctions.put("userName", Richiesta::getUserName);
		attributeSetterBiConsumers.put(
			"userName", (BiConsumer<Richiesta, String>)Richiesta::setUserName);
		attributeGetterFunctions.put("createDate", Richiesta::getCreateDate);
		attributeSetterBiConsumers.put(
			"createDate",
			(BiConsumer<Richiesta, Date>)Richiesta::setCreateDate);
		attributeGetterFunctions.put(
			"modifiedDate", Richiesta::getModifiedDate);
		attributeSetterBiConsumers.put(
			"modifiedDate",
			(BiConsumer<Richiesta, Date>)Richiesta::setModifiedDate);
		attributeGetterFunctions.put(
			"codiceFiscale", Richiesta::getCodiceFiscale);
		attributeSetterBiConsumers.put(
			"codiceFiscale",
			(BiConsumer<Richiesta, String>)Richiesta::setCodiceFiscale);
		attributeGetterFunctions.put("partitaIva", Richiesta::getPartitaIva);
		attributeSetterBiConsumers.put(
			"partitaIva",
			(BiConsumer<Richiesta, String>)Richiesta::setPartitaIva);
		attributeGetterFunctions.put("email", Richiesta::getEmail);
		attributeSetterBiConsumers.put(
			"email", (BiConsumer<Richiesta, String>)Richiesta::setEmail);
		attributeGetterFunctions.put(
			"codiceFiscaleDelegato", Richiesta::getCodiceFiscaleDelegato);
		attributeSetterBiConsumers.put(
			"codiceFiscaleDelegato",
			(BiConsumer<Richiesta, String>)Richiesta::setCodiceFiscaleDelegato);
		attributeGetterFunctions.put("stato", Richiesta::getStato);
		attributeSetterBiConsumers.put(
			"stato", (BiConsumer<Richiesta, String>)Richiesta::setStato);
		attributeGetterFunctions.put(
			"numeroProtocollo", Richiesta::getNumeroProtocollo);
		attributeSetterBiConsumers.put(
			"numeroProtocollo",
			(BiConsumer<Richiesta, String>)Richiesta::setNumeroProtocollo);
		attributeGetterFunctions.put(
			"dataProtocollo", Richiesta::getDataProtocollo);
		attributeSetterBiConsumers.put(
			"dataProtocollo",
			(BiConsumer<Richiesta, Date>)Richiesta::setDataProtocollo);
		attributeGetterFunctions.put("oggetto", Richiesta::getOggetto);
		attributeSetterBiConsumers.put(
			"oggetto", (BiConsumer<Richiesta, String>)Richiesta::setOggetto);
		attributeGetterFunctions.put("note", Richiesta::getNote);
		attributeSetterBiConsumers.put(
			"note", (BiConsumer<Richiesta, String>)Richiesta::setNote);
		attributeGetterFunctions.put("invioGuest", Richiesta::getInvioGuest);
		attributeSetterBiConsumers.put(
			"invioGuest",
			(BiConsumer<Richiesta, Boolean>)Richiesta::setInvioGuest);
		attributeGetterFunctions.put(
			"tokenVisualizzazione", Richiesta::getTokenVisualizzazione);
		attributeSetterBiConsumers.put(
			"tokenVisualizzazione",
			(BiConsumer<Richiesta, String>)Richiesta::setTokenVisualizzazione);
		attributeGetterFunctions.put(
			"chiaveAssociazioneBackoffice",
			Richiesta::getChiaveAssociazioneBackoffice);
		attributeSetterBiConsumers.put(
			"chiaveAssociazioneBackoffice",
			(BiConsumer<Richiesta, String>)
				Richiesta::setChiaveAssociazioneBackoffice);
		attributeGetterFunctions.put("delegaId", Richiesta::getDelegaId);
		attributeSetterBiConsumers.put(
			"delegaId", (BiConsumer<Richiesta, Long>)Richiesta::setDelegaId);
		attributeGetterFunctions.put("proceduraId", Richiesta::getProceduraId);
		attributeSetterBiConsumers.put(
			"proceduraId",
			(BiConsumer<Richiesta, Long>)Richiesta::setProceduraId);

		_attributeGetterFunctions = Collections.unmodifiableMap(
			attributeGetterFunctions);
		_attributeSetterBiConsumers = Collections.unmodifiableMap(
			(Map)attributeSetterBiConsumers);
	}

	@Override
	public String getUuid() {
		if (_uuid == null) {
			return "";
		}
		else {
			return _uuid;
		}
	}

	@Override
	public void setUuid(String uuid) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_uuid = uuid;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public String getOriginalUuid() {
		return getColumnOriginalValue("uuid_");
	}

	@Override
	public long getRichiestaId() {
		return _richiestaId;
	}

	@Override
	public void setRichiestaId(long richiestaId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_richiestaId = richiestaId;
	}

	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_groupId = groupId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalGroupId() {
		return GetterUtil.getLong(this.<Long>getColumnOriginalValue("groupId"));
	}

	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_companyId = companyId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalCompanyId() {
		return GetterUtil.getLong(
			this.<Long>getColumnOriginalValue("companyId"));
	}

	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_userId = userId;
	}

	@Override
	public String getUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getUserId());

			return user.getUuid();
		}
		catch (PortalException portalException) {
			return "";
		}
	}

	@Override
	public void setUserUuid(String userUuid) {
	}

	@Override
	public String getUserName() {
		if (_userName == null) {
			return "";
		}
		else {
			return _userName;
		}
	}

	@Override
	public void setUserName(String userName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_userName = userName;
	}

	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_createDate = createDate;
	}

	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public boolean hasSetModifiedDate() {
		return _setModifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_setModifiedDate = true;

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_modifiedDate = modifiedDate;
	}

	@Override
	public String getCodiceFiscale() {
		if (_codiceFiscale == null) {
			return "";
		}
		else {
			return _codiceFiscale;
		}
	}

	@Override
	public void setCodiceFiscale(String codiceFiscale) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_codiceFiscale = codiceFiscale;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public String getOriginalCodiceFiscale() {
		return getColumnOriginalValue("codiceFiscale");
	}

	@Override
	public String getPartitaIva() {
		if (_partitaIva == null) {
			return "";
		}
		else {
			return _partitaIva;
		}
	}

	@Override
	public void setPartitaIva(String partitaIva) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_partitaIva = partitaIva;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public String getOriginalPartitaIva() {
		return getColumnOriginalValue("partitaIva");
	}

	@Override
	public String getEmail() {
		if (_email == null) {
			return "";
		}
		else {
			return _email;
		}
	}

	@Override
	public void setEmail(String email) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_email = email;
	}

	@Override
	public String getCodiceFiscaleDelegato() {
		if (_codiceFiscaleDelegato == null) {
			return "";
		}
		else {
			return _codiceFiscaleDelegato;
		}
	}

	@Override
	public void setCodiceFiscaleDelegato(String codiceFiscaleDelegato) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_codiceFiscaleDelegato = codiceFiscaleDelegato;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public String getOriginalCodiceFiscaleDelegato() {
		return getColumnOriginalValue("codiceFiscaleDelegato");
	}

	@Override
	public String getStato() {
		if (_stato == null) {
			return "";
		}
		else {
			return _stato;
		}
	}

	@Override
	public void setStato(String stato) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_stato = stato;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public String getOriginalStato() {
		return getColumnOriginalValue("stato");
	}

	@Override
	public String getNumeroProtocollo() {
		if (_numeroProtocollo == null) {
			return "";
		}
		else {
			return _numeroProtocollo;
		}
	}

	@Override
	public void setNumeroProtocollo(String numeroProtocollo) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_numeroProtocollo = numeroProtocollo;
	}

	@Override
	public Date getDataProtocollo() {
		return _dataProtocollo;
	}

	@Override
	public void setDataProtocollo(Date dataProtocollo) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_dataProtocollo = dataProtocollo;
	}

	@Override
	public String getOggetto() {
		if (_oggetto == null) {
			return "";
		}
		else {
			return _oggetto;
		}
	}

	@Override
	public void setOggetto(String oggetto) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_oggetto = oggetto;
	}

	@Override
	public String getNote() {
		if (_note == null) {
			return "";
		}
		else {
			return _note;
		}
	}

	@Override
	public void setNote(String note) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_note = note;
	}

	@Override
	public boolean getInvioGuest() {
		return _invioGuest;
	}

	@Override
	public boolean isInvioGuest() {
		return _invioGuest;
	}

	@Override
	public void setInvioGuest(boolean invioGuest) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_invioGuest = invioGuest;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public boolean getOriginalInvioGuest() {
		return GetterUtil.getBoolean(
			this.<Boolean>getColumnOriginalValue("invioGuest"));
	}

	@Override
	public String getTokenVisualizzazione() {
		if (_tokenVisualizzazione == null) {
			return "";
		}
		else {
			return _tokenVisualizzazione;
		}
	}

	@Override
	public void setTokenVisualizzazione(String tokenVisualizzazione) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_tokenVisualizzazione = tokenVisualizzazione;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public String getOriginalTokenVisualizzazione() {
		return getColumnOriginalValue("tokenVisualizzazione");
	}

	@Override
	public String getChiaveAssociazioneBackoffice() {
		if (_chiaveAssociazioneBackoffice == null) {
			return "";
		}
		else {
			return _chiaveAssociazioneBackoffice;
		}
	}

	@Override
	public void setChiaveAssociazioneBackoffice(
		String chiaveAssociazioneBackoffice) {

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_chiaveAssociazioneBackoffice = chiaveAssociazioneBackoffice;
	}

	@Override
	public Long getDelegaId() {
		return _delegaId;
	}

	@Override
	public void setDelegaId(Long delegaId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_delegaId = delegaId;
	}

	@Override
	public long getProceduraId() {
		return _proceduraId;
	}

	@Override
	public void setProceduraId(long proceduraId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_proceduraId = proceduraId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalProceduraId() {
		return GetterUtil.getLong(
			this.<Long>getColumnOriginalValue("proceduraId"));
	}

	@Override
	public StagedModelType getStagedModelType() {
		return new StagedModelType(
			PortalUtil.getClassNameId(Richiesta.class.getName()));
	}

	public long getColumnBitmask() {
		if (_columnBitmask > 0) {
			return _columnBitmask;
		}

		if ((_columnOriginalValues == null) ||
			(_columnOriginalValues == Collections.EMPTY_MAP)) {

			return 0;
		}

		for (Map.Entry<String, Object> entry :
				_columnOriginalValues.entrySet()) {

			if (!Objects.equals(
					entry.getValue(), getColumnValue(entry.getKey()))) {

				_columnBitmask |= _columnBitmasks.get(entry.getKey());
			}
		}

		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			getCompanyId(), Richiesta.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public Richiesta toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, Richiesta>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		RichiestaImpl richiestaImpl = new RichiestaImpl();

		richiestaImpl.setUuid(getUuid());
		richiestaImpl.setRichiestaId(getRichiestaId());
		richiestaImpl.setGroupId(getGroupId());
		richiestaImpl.setCompanyId(getCompanyId());
		richiestaImpl.setUserId(getUserId());
		richiestaImpl.setUserName(getUserName());
		richiestaImpl.setCreateDate(getCreateDate());
		richiestaImpl.setModifiedDate(getModifiedDate());
		richiestaImpl.setCodiceFiscale(getCodiceFiscale());
		richiestaImpl.setPartitaIva(getPartitaIva());
		richiestaImpl.setEmail(getEmail());
		richiestaImpl.setCodiceFiscaleDelegato(getCodiceFiscaleDelegato());
		richiestaImpl.setStato(getStato());
		richiestaImpl.setNumeroProtocollo(getNumeroProtocollo());
		richiestaImpl.setDataProtocollo(getDataProtocollo());
		richiestaImpl.setOggetto(getOggetto());
		richiestaImpl.setNote(getNote());
		richiestaImpl.setInvioGuest(isInvioGuest());
		richiestaImpl.setTokenVisualizzazione(getTokenVisualizzazione());
		richiestaImpl.setChiaveAssociazioneBackoffice(
			getChiaveAssociazioneBackoffice());
		richiestaImpl.setDelegaId(getDelegaId());
		richiestaImpl.setProceduraId(getProceduraId());

		richiestaImpl.resetOriginalValues();

		return richiestaImpl;
	}

	@Override
	public Richiesta cloneWithOriginalValues() {
		RichiestaImpl richiestaImpl = new RichiestaImpl();

		richiestaImpl.setUuid(this.<String>getColumnOriginalValue("uuid_"));
		richiestaImpl.setRichiestaId(
			this.<Long>getColumnOriginalValue("richiestaId"));
		richiestaImpl.setGroupId(this.<Long>getColumnOriginalValue("groupId"));
		richiestaImpl.setCompanyId(
			this.<Long>getColumnOriginalValue("companyId"));
		richiestaImpl.setUserId(this.<Long>getColumnOriginalValue("userId"));
		richiestaImpl.setUserName(
			this.<String>getColumnOriginalValue("userName"));
		richiestaImpl.setCreateDate(
			this.<Date>getColumnOriginalValue("createDate"));
		richiestaImpl.setModifiedDate(
			this.<Date>getColumnOriginalValue("modifiedDate"));
		richiestaImpl.setCodiceFiscale(
			this.<String>getColumnOriginalValue("codiceFiscale"));
		richiestaImpl.setPartitaIva(
			this.<String>getColumnOriginalValue("partitaIva"));
		richiestaImpl.setEmail(this.<String>getColumnOriginalValue("email"));
		richiestaImpl.setCodiceFiscaleDelegato(
			this.<String>getColumnOriginalValue("codiceFiscaleDelegato"));
		richiestaImpl.setStato(this.<String>getColumnOriginalValue("stato"));
		richiestaImpl.setNumeroProtocollo(
			this.<String>getColumnOriginalValue("numeroProtocollo"));
		richiestaImpl.setDataProtocollo(
			this.<Date>getColumnOriginalValue("dataProtocollo"));
		richiestaImpl.setOggetto(
			this.<String>getColumnOriginalValue("oggetto"));
		richiestaImpl.setNote(this.<String>getColumnOriginalValue("note"));
		richiestaImpl.setInvioGuest(
			this.<Boolean>getColumnOriginalValue("invioGuest"));
		richiestaImpl.setTokenVisualizzazione(
			this.<String>getColumnOriginalValue("tokenVisualizzazione"));
		richiestaImpl.setChiaveAssociazioneBackoffice(
			this.<String>getColumnOriginalValue(
				"chiaveAssociazioneBackoffice"));
		richiestaImpl.setDelegaId(
			this.<Long>getColumnOriginalValue("delegaId"));
		richiestaImpl.setProceduraId(
			this.<Long>getColumnOriginalValue("proceduraId"));

		return richiestaImpl;
	}

	@Override
	public int compareTo(Richiesta richiesta) {
		long primaryKey = richiesta.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object object) {
		if (this == object) {
			return true;
		}

		if (!(object instanceof Richiesta)) {
			return false;
		}

		Richiesta richiesta = (Richiesta)object;

		long primaryKey = richiesta.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isEntityCacheEnabled() {
		return true;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isFinderCacheEnabled() {
		return true;
	}

	@Override
	public void resetOriginalValues() {
		_columnOriginalValues = Collections.emptyMap();

		_setModifiedDate = false;

		_columnBitmask = 0;
	}

	@Override
	public CacheModel<Richiesta> toCacheModel() {
		RichiestaCacheModel richiestaCacheModel = new RichiestaCacheModel();

		richiestaCacheModel.uuid = getUuid();

		String uuid = richiestaCacheModel.uuid;

		if ((uuid != null) && (uuid.length() == 0)) {
			richiestaCacheModel.uuid = null;
		}

		richiestaCacheModel.richiestaId = getRichiestaId();

		richiestaCacheModel.groupId = getGroupId();

		richiestaCacheModel.companyId = getCompanyId();

		richiestaCacheModel.userId = getUserId();

		richiestaCacheModel.userName = getUserName();

		String userName = richiestaCacheModel.userName;

		if ((userName != null) && (userName.length() == 0)) {
			richiestaCacheModel.userName = null;
		}

		Date createDate = getCreateDate();

		if (createDate != null) {
			richiestaCacheModel.createDate = createDate.getTime();
		}
		else {
			richiestaCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			richiestaCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			richiestaCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		richiestaCacheModel.codiceFiscale = getCodiceFiscale();

		String codiceFiscale = richiestaCacheModel.codiceFiscale;

		if ((codiceFiscale != null) && (codiceFiscale.length() == 0)) {
			richiestaCacheModel.codiceFiscale = null;
		}

		richiestaCacheModel.partitaIva = getPartitaIva();

		String partitaIva = richiestaCacheModel.partitaIva;

		if ((partitaIva != null) && (partitaIva.length() == 0)) {
			richiestaCacheModel.partitaIva = null;
		}

		richiestaCacheModel.email = getEmail();

		String email = richiestaCacheModel.email;

		if ((email != null) && (email.length() == 0)) {
			richiestaCacheModel.email = null;
		}

		richiestaCacheModel.codiceFiscaleDelegato = getCodiceFiscaleDelegato();

		String codiceFiscaleDelegato =
			richiestaCacheModel.codiceFiscaleDelegato;

		if ((codiceFiscaleDelegato != null) &&
			(codiceFiscaleDelegato.length() == 0)) {

			richiestaCacheModel.codiceFiscaleDelegato = null;
		}

		richiestaCacheModel.stato = getStato();

		String stato = richiestaCacheModel.stato;

		if ((stato != null) && (stato.length() == 0)) {
			richiestaCacheModel.stato = null;
		}

		richiestaCacheModel.numeroProtocollo = getNumeroProtocollo();

		String numeroProtocollo = richiestaCacheModel.numeroProtocollo;

		if ((numeroProtocollo != null) && (numeroProtocollo.length() == 0)) {
			richiestaCacheModel.numeroProtocollo = null;
		}

		Date dataProtocollo = getDataProtocollo();

		if (dataProtocollo != null) {
			richiestaCacheModel.dataProtocollo = dataProtocollo.getTime();
		}
		else {
			richiestaCacheModel.dataProtocollo = Long.MIN_VALUE;
		}

		richiestaCacheModel.oggetto = getOggetto();

		String oggetto = richiestaCacheModel.oggetto;

		if ((oggetto != null) && (oggetto.length() == 0)) {
			richiestaCacheModel.oggetto = null;
		}

		richiestaCacheModel.note = getNote();

		String note = richiestaCacheModel.note;

		if ((note != null) && (note.length() == 0)) {
			richiestaCacheModel.note = null;
		}

		richiestaCacheModel.invioGuest = isInvioGuest();

		richiestaCacheModel.tokenVisualizzazione = getTokenVisualizzazione();

		String tokenVisualizzazione = richiestaCacheModel.tokenVisualizzazione;

		if ((tokenVisualizzazione != null) &&
			(tokenVisualizzazione.length() == 0)) {

			richiestaCacheModel.tokenVisualizzazione = null;
		}

		richiestaCacheModel.chiaveAssociazioneBackoffice =
			getChiaveAssociazioneBackoffice();

		String chiaveAssociazioneBackoffice =
			richiestaCacheModel.chiaveAssociazioneBackoffice;

		if ((chiaveAssociazioneBackoffice != null) &&
			(chiaveAssociazioneBackoffice.length() == 0)) {

			richiestaCacheModel.chiaveAssociazioneBackoffice = null;
		}

		Long delegaId = getDelegaId();

		if (delegaId != null) {
			richiestaCacheModel.delegaId = delegaId;
		}

		richiestaCacheModel.proceduraId = getProceduraId();

		return richiestaCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<Richiesta, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 2);

		sb.append("{");

		for (Map.Entry<String, Function<Richiesta, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<Richiesta, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("\"");
			sb.append(attributeName);
			sb.append("\": ");

			Object value = attributeGetterFunction.apply((Richiesta)this);

			if (value == null) {
				sb.append("null");
			}
			else if (value instanceof Blob || value instanceof Date ||
					 value instanceof Map || value instanceof String) {

				sb.append(
					"\"" + StringUtil.replace(value.toString(), "\"", "'") +
						"\"");
			}
			else {
				sb.append(value);
			}

			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		Map<String, Function<Richiesta, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 4);

		sb.append("<model><model-name>");
		sb.append(getModelClassName());
		sb.append("</model-name>");

		for (Map.Entry<String, Function<Richiesta, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<Richiesta, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("<column><column-name>");
			sb.append(attributeName);
			sb.append("</column-name><column-value><![CDATA[");
			sb.append(attributeGetterFunction.apply((Richiesta)this));
			sb.append("]]></column-value></column>");
		}

		sb.append("</model>");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function<InvocationHandler, Richiesta>
			_escapedModelProxyProviderFunction = _getProxyProviderFunction();

	}

	private String _uuid;
	private long _richiestaId;
	private long _groupId;
	private long _companyId;
	private long _userId;
	private String _userName;
	private Date _createDate;
	private Date _modifiedDate;
	private boolean _setModifiedDate;
	private String _codiceFiscale;
	private String _partitaIva;
	private String _email;
	private String _codiceFiscaleDelegato;
	private String _stato;
	private String _numeroProtocollo;
	private Date _dataProtocollo;
	private String _oggetto;
	private String _note;
	private boolean _invioGuest;
	private String _tokenVisualizzazione;
	private String _chiaveAssociazioneBackoffice;
	private Long _delegaId;
	private long _proceduraId;

	public <T> T getColumnValue(String columnName) {
		columnName = _attributeNames.getOrDefault(columnName, columnName);

		Function<Richiesta, Object> function = _attributeGetterFunctions.get(
			columnName);

		if (function == null) {
			throw new IllegalArgumentException(
				"No attribute getter function found for " + columnName);
		}

		return (T)function.apply((Richiesta)this);
	}

	public <T> T getColumnOriginalValue(String columnName) {
		if (_columnOriginalValues == null) {
			return null;
		}

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		return (T)_columnOriginalValues.get(columnName);
	}

	private void _setColumnOriginalValues() {
		_columnOriginalValues = new HashMap<String, Object>();

		_columnOriginalValues.put("uuid_", _uuid);
		_columnOriginalValues.put("richiestaId", _richiestaId);
		_columnOriginalValues.put("groupId", _groupId);
		_columnOriginalValues.put("companyId", _companyId);
		_columnOriginalValues.put("userId", _userId);
		_columnOriginalValues.put("userName", _userName);
		_columnOriginalValues.put("createDate", _createDate);
		_columnOriginalValues.put("modifiedDate", _modifiedDate);
		_columnOriginalValues.put("codiceFiscale", _codiceFiscale);
		_columnOriginalValues.put("partitaIva", _partitaIva);
		_columnOriginalValues.put("email", _email);
		_columnOriginalValues.put(
			"codiceFiscaleDelegato", _codiceFiscaleDelegato);
		_columnOriginalValues.put("stato", _stato);
		_columnOriginalValues.put("numeroProtocollo", _numeroProtocollo);
		_columnOriginalValues.put("dataProtocollo", _dataProtocollo);
		_columnOriginalValues.put("oggetto", _oggetto);
		_columnOriginalValues.put("note", _note);
		_columnOriginalValues.put("invioGuest", _invioGuest);
		_columnOriginalValues.put(
			"tokenVisualizzazione", _tokenVisualizzazione);
		_columnOriginalValues.put(
			"chiaveAssociazioneBackoffice", _chiaveAssociazioneBackoffice);
		_columnOriginalValues.put("delegaId", _delegaId);
		_columnOriginalValues.put("proceduraId", _proceduraId);
	}

	private static final Map<String, String> _attributeNames;

	static {
		Map<String, String> attributeNames = new HashMap<>();

		attributeNames.put("uuid_", "uuid");

		_attributeNames = Collections.unmodifiableMap(attributeNames);
	}

	private transient Map<String, Object> _columnOriginalValues;

	public static long getColumnBitmask(String columnName) {
		return _columnBitmasks.get(columnName);
	}

	private static final Map<String, Long> _columnBitmasks;

	static {
		Map<String, Long> columnBitmasks = new HashMap<>();

		columnBitmasks.put("uuid_", 1L);

		columnBitmasks.put("richiestaId", 2L);

		columnBitmasks.put("groupId", 4L);

		columnBitmasks.put("companyId", 8L);

		columnBitmasks.put("userId", 16L);

		columnBitmasks.put("userName", 32L);

		columnBitmasks.put("createDate", 64L);

		columnBitmasks.put("modifiedDate", 128L);

		columnBitmasks.put("codiceFiscale", 256L);

		columnBitmasks.put("partitaIva", 512L);

		columnBitmasks.put("email", 1024L);

		columnBitmasks.put("codiceFiscaleDelegato", 2048L);

		columnBitmasks.put("stato", 4096L);

		columnBitmasks.put("numeroProtocollo", 8192L);

		columnBitmasks.put("dataProtocollo", 16384L);

		columnBitmasks.put("oggetto", 32768L);

		columnBitmasks.put("note", 65536L);

		columnBitmasks.put("invioGuest", 131072L);

		columnBitmasks.put("tokenVisualizzazione", 262144L);

		columnBitmasks.put("chiaveAssociazioneBackoffice", 524288L);

		columnBitmasks.put("delegaId", 1048576L);

		columnBitmasks.put("proceduraId", 2097152L);

		_columnBitmasks = Collections.unmodifiableMap(columnBitmasks);
	}

	private long _columnBitmask;
	private Richiesta _escapedModel;

}