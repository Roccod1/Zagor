/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package it.servizidigitali.scrivaniaoperatore.model.impl;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.exportimport.kernel.lar.StagedModelType;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.User;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.service.UserLocalServiceUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.PortalUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringUtil;

import it.servizidigitali.scrivaniaoperatore.model.CommentoRichiesta;
import it.servizidigitali.scrivaniaoperatore.model.CommentoRichiestaModel;

import java.io.Serializable;

import java.lang.reflect.Constructor;
import java.lang.reflect.InvocationHandler;

import java.sql.Blob;
import java.sql.Types;

import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.Objects;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the CommentoRichiesta service. Represents a row in the &quot;commento_richiesta&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>CommentoRichiestaModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link CommentoRichiestaImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see CommentoRichiestaImpl
 * @generated
 */
public class CommentoRichiestaModelImpl
	extends BaseModelImpl<CommentoRichiesta> implements CommentoRichiestaModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a commento richiesta model instance should use the <code>CommentoRichiesta</code> interface instead.
	 */
	public static final String TABLE_NAME = "commento_richiesta";

	public static final Object[][] TABLE_COLUMNS = {
		{"uuid_", Types.VARCHAR}, {"commentoRichiestaId", Types.BIGINT},
		{"groupId", Types.BIGINT}, {"companyId", Types.BIGINT},
		{"userId", Types.BIGINT}, {"userName", Types.VARCHAR},
		{"createDate", Types.TIMESTAMP}, {"modifiedDate", Types.TIMESTAMP},
		{"testo", Types.VARCHAR}, {"taskId", Types.VARCHAR},
		{"visibile", Types.BOOLEAN}, {"richiestaId", Types.BIGINT}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("uuid_", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("commentoRichiestaId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("groupId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("companyId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("createDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("modifiedDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("testo", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("taskId", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("visibile", Types.BOOLEAN);
		TABLE_COLUMNS_MAP.put("richiestaId", Types.BIGINT);
	}

	public static final String TABLE_SQL_CREATE =
		"create table commento_richiesta (uuid_ VARCHAR(75) null,commentoRichiestaId LONG not null primary key,groupId LONG,companyId LONG,userId LONG,userName VARCHAR(75) null,createDate DATE null,modifiedDate DATE null,testo VARCHAR(75) null,taskId VARCHAR(75) null,visibile BOOLEAN,richiestaId LONG)";

	public static final String TABLE_SQL_DROP = "drop table commento_richiesta";

	public static final String ORDER_BY_JPQL =
		" ORDER BY commentoRichiesta.commentoRichiestaId ASC";

	public static final String ORDER_BY_SQL =
		" ORDER BY commento_richiesta.commentoRichiestaId ASC";

	public static final String DATA_SOURCE = "servizidigitaliDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long COMPANYID_COLUMN_BITMASK = 1L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long GROUPID_COLUMN_BITMASK = 2L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long RICHIESTAID_COLUMN_BITMASK = 4L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long TASKID_COLUMN_BITMASK = 8L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long UUID_COLUMN_BITMASK = 16L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long VISIBILE_COLUMN_BITMASK = 32L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *		#getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long COMMENTORICHIESTAID_COLUMN_BITMASK = 64L;

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
	}

	public CommentoRichiestaModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _commentoRichiestaId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setCommentoRichiestaId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _commentoRichiestaId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return CommentoRichiesta.class;
	}

	@Override
	public String getModelClassName() {
		return CommentoRichiesta.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<CommentoRichiesta, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		for (Map.Entry<String, Function<CommentoRichiesta, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<CommentoRichiesta, Object> attributeGetterFunction =
				entry.getValue();

			attributes.put(
				attributeName,
				attributeGetterFunction.apply((CommentoRichiesta)this));
		}

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<CommentoRichiesta, Object>>
			attributeSetterBiConsumers = getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<CommentoRichiesta, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(CommentoRichiesta)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<CommentoRichiesta, Object>>
		getAttributeGetterFunctions() {

		return _attributeGetterFunctions;
	}

	public Map<String, BiConsumer<CommentoRichiesta, Object>>
		getAttributeSetterBiConsumers() {

		return _attributeSetterBiConsumers;
	}

	private static Function<InvocationHandler, CommentoRichiesta>
		_getProxyProviderFunction() {

		Class<?> proxyClass = ProxyUtil.getProxyClass(
			CommentoRichiesta.class.getClassLoader(), CommentoRichiesta.class,
			ModelWrapper.class);

		try {
			Constructor<CommentoRichiesta> constructor =
				(Constructor<CommentoRichiesta>)proxyClass.getConstructor(
					InvocationHandler.class);

			return invocationHandler -> {
				try {
					return constructor.newInstance(invocationHandler);
				}
				catch (ReflectiveOperationException
							reflectiveOperationException) {

					throw new InternalError(reflectiveOperationException);
				}
			};
		}
		catch (NoSuchMethodException noSuchMethodException) {
			throw new InternalError(noSuchMethodException);
		}
	}

	private static final Map<String, Function<CommentoRichiesta, Object>>
		_attributeGetterFunctions;
	private static final Map<String, BiConsumer<CommentoRichiesta, Object>>
		_attributeSetterBiConsumers;

	static {
		Map<String, Function<CommentoRichiesta, Object>>
			attributeGetterFunctions =
				new LinkedHashMap
					<String, Function<CommentoRichiesta, Object>>();
		Map<String, BiConsumer<CommentoRichiesta, ?>>
			attributeSetterBiConsumers =
				new LinkedHashMap<String, BiConsumer<CommentoRichiesta, ?>>();

		attributeGetterFunctions.put("uuid", CommentoRichiesta::getUuid);
		attributeSetterBiConsumers.put(
			"uuid",
			(BiConsumer<CommentoRichiesta, String>)CommentoRichiesta::setUuid);
		attributeGetterFunctions.put(
			"commentoRichiestaId", CommentoRichiesta::getCommentoRichiestaId);
		attributeSetterBiConsumers.put(
			"commentoRichiestaId",
			(BiConsumer<CommentoRichiesta, Long>)
				CommentoRichiesta::setCommentoRichiestaId);
		attributeGetterFunctions.put("groupId", CommentoRichiesta::getGroupId);
		attributeSetterBiConsumers.put(
			"groupId",
			(BiConsumer<CommentoRichiesta, Long>)CommentoRichiesta::setGroupId);
		attributeGetterFunctions.put(
			"companyId", CommentoRichiesta::getCompanyId);
		attributeSetterBiConsumers.put(
			"companyId",
			(BiConsumer<CommentoRichiesta, Long>)
				CommentoRichiesta::setCompanyId);
		attributeGetterFunctions.put("userId", CommentoRichiesta::getUserId);
		attributeSetterBiConsumers.put(
			"userId",
			(BiConsumer<CommentoRichiesta, Long>)CommentoRichiesta::setUserId);
		attributeGetterFunctions.put(
			"userName", CommentoRichiesta::getUserName);
		attributeSetterBiConsumers.put(
			"userName",
			(BiConsumer<CommentoRichiesta, String>)
				CommentoRichiesta::setUserName);
		attributeGetterFunctions.put(
			"createDate", CommentoRichiesta::getCreateDate);
		attributeSetterBiConsumers.put(
			"createDate",
			(BiConsumer<CommentoRichiesta, Date>)
				CommentoRichiesta::setCreateDate);
		attributeGetterFunctions.put(
			"modifiedDate", CommentoRichiesta::getModifiedDate);
		attributeSetterBiConsumers.put(
			"modifiedDate",
			(BiConsumer<CommentoRichiesta, Date>)
				CommentoRichiesta::setModifiedDate);
		attributeGetterFunctions.put("testo", CommentoRichiesta::getTesto);
		attributeSetterBiConsumers.put(
			"testo",
			(BiConsumer<CommentoRichiesta, String>)CommentoRichiesta::setTesto);
		attributeGetterFunctions.put("taskId", CommentoRichiesta::getTaskId);
		attributeSetterBiConsumers.put(
			"taskId",
			(BiConsumer<CommentoRichiesta, String>)
				CommentoRichiesta::setTaskId);
		attributeGetterFunctions.put(
			"visibile", CommentoRichiesta::getVisibile);
		attributeSetterBiConsumers.put(
			"visibile",
			(BiConsumer<CommentoRichiesta, Boolean>)
				CommentoRichiesta::setVisibile);
		attributeGetterFunctions.put(
			"richiestaId", CommentoRichiesta::getRichiestaId);
		attributeSetterBiConsumers.put(
			"richiestaId",
			(BiConsumer<CommentoRichiesta, Long>)
				CommentoRichiesta::setRichiestaId);

		_attributeGetterFunctions = Collections.unmodifiableMap(
			attributeGetterFunctions);
		_attributeSetterBiConsumers = Collections.unmodifiableMap(
			(Map)attributeSetterBiConsumers);
	}

	@Override
	public String getUuid() {
		if (_uuid == null) {
			return "";
		}
		else {
			return _uuid;
		}
	}

	@Override
	public void setUuid(String uuid) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_uuid = uuid;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public String getOriginalUuid() {
		return getColumnOriginalValue("uuid_");
	}

	@Override
	public long getCommentoRichiestaId() {
		return _commentoRichiestaId;
	}

	@Override
	public void setCommentoRichiestaId(long commentoRichiestaId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_commentoRichiestaId = commentoRichiestaId;
	}

	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_groupId = groupId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalGroupId() {
		return GetterUtil.getLong(this.<Long>getColumnOriginalValue("groupId"));
	}

	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_companyId = companyId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalCompanyId() {
		return GetterUtil.getLong(
			this.<Long>getColumnOriginalValue("companyId"));
	}

	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_userId = userId;
	}

	@Override
	public String getUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getUserId());

			return user.getUuid();
		}
		catch (PortalException portalException) {
			return "";
		}
	}

	@Override
	public void setUserUuid(String userUuid) {
	}

	@Override
	public String getUserName() {
		if (_userName == null) {
			return "";
		}
		else {
			return _userName;
		}
	}

	@Override
	public void setUserName(String userName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_userName = userName;
	}

	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_createDate = createDate;
	}

	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public boolean hasSetModifiedDate() {
		return _setModifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_setModifiedDate = true;

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_modifiedDate = modifiedDate;
	}

	@Override
	public String getTesto() {
		if (_testo == null) {
			return "";
		}
		else {
			return _testo;
		}
	}

	@Override
	public void setTesto(String testo) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_testo = testo;
	}

	@Override
	public String getTaskId() {
		if (_taskId == null) {
			return "";
		}
		else {
			return _taskId;
		}
	}

	@Override
	public void setTaskId(String taskId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_taskId = taskId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public String getOriginalTaskId() {
		return getColumnOriginalValue("taskId");
	}

	@Override
	public boolean getVisibile() {
		return _visibile;
	}

	@Override
	public boolean isVisibile() {
		return _visibile;
	}

	@Override
	public void setVisibile(boolean visibile) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_visibile = visibile;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public boolean getOriginalVisibile() {
		return GetterUtil.getBoolean(
			this.<Boolean>getColumnOriginalValue("visibile"));
	}

	@Override
	public long getRichiestaId() {
		return _richiestaId;
	}

	@Override
	public void setRichiestaId(long richiestaId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_richiestaId = richiestaId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalRichiestaId() {
		return GetterUtil.getLong(
			this.<Long>getColumnOriginalValue("richiestaId"));
	}

	@Override
	public StagedModelType getStagedModelType() {
		return new StagedModelType(
			PortalUtil.getClassNameId(CommentoRichiesta.class.getName()));
	}

	public long getColumnBitmask() {
		if (_columnBitmask > 0) {
			return _columnBitmask;
		}

		if ((_columnOriginalValues == null) ||
			(_columnOriginalValues == Collections.EMPTY_MAP)) {

			return 0;
		}

		for (Map.Entry<String, Object> entry :
				_columnOriginalValues.entrySet()) {

			if (!Objects.equals(
					entry.getValue(), getColumnValue(entry.getKey()))) {

				_columnBitmask |= _columnBitmasks.get(entry.getKey());
			}
		}

		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			getCompanyId(), CommentoRichiesta.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public CommentoRichiesta toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, CommentoRichiesta>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		CommentoRichiestaImpl commentoRichiestaImpl =
			new CommentoRichiestaImpl();

		commentoRichiestaImpl.setUuid(getUuid());
		commentoRichiestaImpl.setCommentoRichiestaId(getCommentoRichiestaId());
		commentoRichiestaImpl.setGroupId(getGroupId());
		commentoRichiestaImpl.setCompanyId(getCompanyId());
		commentoRichiestaImpl.setUserId(getUserId());
		commentoRichiestaImpl.setUserName(getUserName());
		commentoRichiestaImpl.setCreateDate(getCreateDate());
		commentoRichiestaImpl.setModifiedDate(getModifiedDate());
		commentoRichiestaImpl.setTesto(getTesto());
		commentoRichiestaImpl.setTaskId(getTaskId());
		commentoRichiestaImpl.setVisibile(isVisibile());
		commentoRichiestaImpl.setRichiestaId(getRichiestaId());

		commentoRichiestaImpl.resetOriginalValues();

		return commentoRichiestaImpl;
	}

	@Override
	public CommentoRichiesta cloneWithOriginalValues() {
		CommentoRichiestaImpl commentoRichiestaImpl =
			new CommentoRichiestaImpl();

		commentoRichiestaImpl.setUuid(
			this.<String>getColumnOriginalValue("uuid_"));
		commentoRichiestaImpl.setCommentoRichiestaId(
			this.<Long>getColumnOriginalValue("commentoRichiestaId"));
		commentoRichiestaImpl.setGroupId(
			this.<Long>getColumnOriginalValue("groupId"));
		commentoRichiestaImpl.setCompanyId(
			this.<Long>getColumnOriginalValue("companyId"));
		commentoRichiestaImpl.setUserId(
			this.<Long>getColumnOriginalValue("userId"));
		commentoRichiestaImpl.setUserName(
			this.<String>getColumnOriginalValue("userName"));
		commentoRichiestaImpl.setCreateDate(
			this.<Date>getColumnOriginalValue("createDate"));
		commentoRichiestaImpl.setModifiedDate(
			this.<Date>getColumnOriginalValue("modifiedDate"));
		commentoRichiestaImpl.setTesto(
			this.<String>getColumnOriginalValue("testo"));
		commentoRichiestaImpl.setTaskId(
			this.<String>getColumnOriginalValue("taskId"));
		commentoRichiestaImpl.setVisibile(
			this.<Boolean>getColumnOriginalValue("visibile"));
		commentoRichiestaImpl.setRichiestaId(
			this.<Long>getColumnOriginalValue("richiestaId"));

		return commentoRichiestaImpl;
	}

	@Override
	public int compareTo(CommentoRichiesta commentoRichiesta) {
		long primaryKey = commentoRichiesta.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object object) {
		if (this == object) {
			return true;
		}

		if (!(object instanceof CommentoRichiesta)) {
			return false;
		}

		CommentoRichiesta commentoRichiesta = (CommentoRichiesta)object;

		long primaryKey = commentoRichiesta.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isEntityCacheEnabled() {
		return true;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isFinderCacheEnabled() {
		return true;
	}

	@Override
	public void resetOriginalValues() {
		_columnOriginalValues = Collections.emptyMap();

		_setModifiedDate = false;

		_columnBitmask = 0;
	}

	@Override
	public CacheModel<CommentoRichiesta> toCacheModel() {
		CommentoRichiestaCacheModel commentoRichiestaCacheModel =
			new CommentoRichiestaCacheModel();

		commentoRichiestaCacheModel.uuid = getUuid();

		String uuid = commentoRichiestaCacheModel.uuid;

		if ((uuid != null) && (uuid.length() == 0)) {
			commentoRichiestaCacheModel.uuid = null;
		}

		commentoRichiestaCacheModel.commentoRichiestaId =
			getCommentoRichiestaId();

		commentoRichiestaCacheModel.groupId = getGroupId();

		commentoRichiestaCacheModel.companyId = getCompanyId();

		commentoRichiestaCacheModel.userId = getUserId();

		commentoRichiestaCacheModel.userName = getUserName();

		String userName = commentoRichiestaCacheModel.userName;

		if ((userName != null) && (userName.length() == 0)) {
			commentoRichiestaCacheModel.userName = null;
		}

		Date createDate = getCreateDate();

		if (createDate != null) {
			commentoRichiestaCacheModel.createDate = createDate.getTime();
		}
		else {
			commentoRichiestaCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			commentoRichiestaCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			commentoRichiestaCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		commentoRichiestaCacheModel.testo = getTesto();

		String testo = commentoRichiestaCacheModel.testo;

		if ((testo != null) && (testo.length() == 0)) {
			commentoRichiestaCacheModel.testo = null;
		}

		commentoRichiestaCacheModel.taskId = getTaskId();

		String taskId = commentoRichiestaCacheModel.taskId;

		if ((taskId != null) && (taskId.length() == 0)) {
			commentoRichiestaCacheModel.taskId = null;
		}

		commentoRichiestaCacheModel.visibile = isVisibile();

		commentoRichiestaCacheModel.richiestaId = getRichiestaId();

		return commentoRichiestaCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<CommentoRichiesta, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 2);

		sb.append("{");

		for (Map.Entry<String, Function<CommentoRichiesta, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<CommentoRichiesta, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("\"");
			sb.append(attributeName);
			sb.append("\": ");

			Object value = attributeGetterFunction.apply(
				(CommentoRichiesta)this);

			if (value == null) {
				sb.append("null");
			}
			else if (value instanceof Blob || value instanceof Date ||
					 value instanceof Map || value instanceof String) {

				sb.append(
					"\"" + StringUtil.replace(value.toString(), "\"", "'") +
						"\"");
			}
			else {
				sb.append(value);
			}

			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		Map<String, Function<CommentoRichiesta, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 4);

		sb.append("<model><model-name>");
		sb.append(getModelClassName());
		sb.append("</model-name>");

		for (Map.Entry<String, Function<CommentoRichiesta, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<CommentoRichiesta, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("<column><column-name>");
			sb.append(attributeName);
			sb.append("</column-name><column-value><![CDATA[");
			sb.append(attributeGetterFunction.apply((CommentoRichiesta)this));
			sb.append("]]></column-value></column>");
		}

		sb.append("</model>");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function<InvocationHandler, CommentoRichiesta>
			_escapedModelProxyProviderFunction = _getProxyProviderFunction();

	}

	private String _uuid;
	private long _commentoRichiestaId;
	private long _groupId;
	private long _companyId;
	private long _userId;
	private String _userName;
	private Date _createDate;
	private Date _modifiedDate;
	private boolean _setModifiedDate;
	private String _testo;
	private String _taskId;
	private boolean _visibile;
	private long _richiestaId;

	public <T> T getColumnValue(String columnName) {
		columnName = _attributeNames.getOrDefault(columnName, columnName);

		Function<CommentoRichiesta, Object> function =
			_attributeGetterFunctions.get(columnName);

		if (function == null) {
			throw new IllegalArgumentException(
				"No attribute getter function found for " + columnName);
		}

		return (T)function.apply((CommentoRichiesta)this);
	}

	public <T> T getColumnOriginalValue(String columnName) {
		if (_columnOriginalValues == null) {
			return null;
		}

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		return (T)_columnOriginalValues.get(columnName);
	}

	private void _setColumnOriginalValues() {
		_columnOriginalValues = new HashMap<String, Object>();

		_columnOriginalValues.put("uuid_", _uuid);
		_columnOriginalValues.put("commentoRichiestaId", _commentoRichiestaId);
		_columnOriginalValues.put("groupId", _groupId);
		_columnOriginalValues.put("companyId", _companyId);
		_columnOriginalValues.put("userId", _userId);
		_columnOriginalValues.put("userName", _userName);
		_columnOriginalValues.put("createDate", _createDate);
		_columnOriginalValues.put("modifiedDate", _modifiedDate);
		_columnOriginalValues.put("testo", _testo);
		_columnOriginalValues.put("taskId", _taskId);
		_columnOriginalValues.put("visibile", _visibile);
		_columnOriginalValues.put("richiestaId", _richiestaId);
	}

	private static final Map<String, String> _attributeNames;

	static {
		Map<String, String> attributeNames = new HashMap<>();

		attributeNames.put("uuid_", "uuid");

		_attributeNames = Collections.unmodifiableMap(attributeNames);
	}

	private transient Map<String, Object> _columnOriginalValues;

	public static long getColumnBitmask(String columnName) {
		return _columnBitmasks.get(columnName);
	}

	private static final Map<String, Long> _columnBitmasks;

	static {
		Map<String, Long> columnBitmasks = new HashMap<>();

		columnBitmasks.put("uuid_", 1L);

		columnBitmasks.put("commentoRichiestaId", 2L);

		columnBitmasks.put("groupId", 4L);

		columnBitmasks.put("companyId", 8L);

		columnBitmasks.put("userId", 16L);

		columnBitmasks.put("userName", 32L);

		columnBitmasks.put("createDate", 64L);

		columnBitmasks.put("modifiedDate", 128L);

		columnBitmasks.put("testo", 256L);

		columnBitmasks.put("taskId", 512L);

		columnBitmasks.put("visibile", 1024L);

		columnBitmasks.put("richiestaId", 2048L);

		_columnBitmasks = Collections.unmodifiableMap(columnBitmasks);
	}

	private long _columnBitmask;
	private CommentoRichiesta _escapedModel;

}